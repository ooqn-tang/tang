<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.ttcxy.tang.gateway.dao.DtsBlogDao">
    <resultMap id="BlogResult" type="net.ttcxy.tang.gateway.entity.dto.DtsBlogDto">
        <id column="blog_id" property="blogId"/>
        <result column="title" property="title"/>
        <result column="create_date" property="createDate"/>
        <result column="update_date" property="updateDate"/>
        <result column="synopsis" property="synopsis"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="text" property="text"/>
        <result column="blog_subject_id" property="subjectId"/>
        <result column="subject_name" property="subjectName"/>
        <association property="tagList" column="{blogId=blog_id}" select="net.ttcxy.tang.gateway.dao.DtsBlogTagDao.selectByBlogId"/>
    </resultMap>

    <select id="search" resultMap="BlogResult">
        select a.username ,a.nickname ,b.blog_id,b.title  ,b.create_date ,b.synopsis ,bt.blog_tag_id ,bt.tag_name
        from uts_author a
        inner join dts_blog b on a.author_id = b.author_id and b.state_code = 1001 and b.title like concat('%',#{title},'%')
        left join dts_blog_tag_relation dbtr on dbtr.blog_id = b.blog_id
        left join dts_blog_tag bt on bt.blog_tag_id = dbtr.blog_tag_id
        order by b.blog_id desc
    </select>

    <select id="selectBlogById" resultMap="BlogResult">
        select a1.username ,a1.nickname ,b1.blog_id ,b1.title ,b1.create_date ,b1.synopsis ,b1.text ,bt1.blog_tag_id ,bt1.tag_name
        from dts_blog b1
        inner join uts_author a1 on b1.blog_id = #{id} and b1.author_id = a1.author_id
        left join dts_blog_tag_relation btr1 on btr1.blog_id = b1.blog_id
        left join dts_blog_tag bt1 on bt1.blog_tag_id = btr1.blog_tag_id
    </select>

    <select id="selectLikeBlogs" resultMap="BlogResult">
        select a2.username ,a2.nickname ,b1.blog_id ,b1.title ,b1.create_date ,b1.synopsis ,bt1.blog_tag_id ,bt1.tag_name
        from uts_author a1
        inner join dts_like_blog ld1 on a1.username = #{username} and ld1.author_id = a1.author_id
        inner join dts_blog  b1 on b1.blog_id = ld1.blog_id
        inner join uts_author a2 on a2.author_id = ld1.author_id
        left join dts_blog_tag_relation btr1 on btr1.blog_id = b1.blog_id
        left join dts_blog_tag bt1 on bt1.blog_tag_id = btr1.blog_tag_id
        order by ld1.create_date desc
    </select>

    <select id="selectBlogListByUsername" resultMap="BlogResult">
        select a.username ,a.nickname ,b.blog_id ,b.title ,b.create_date ,b.synopsis ,bt.blog_tag_id ,bt.tag_name,bs1.subject_name ,bs1.blog_subject_id
        from uts_author a
        inner join dts_blog b on a.author_id = b.author_id and a.username = #{username}
        left join dts_blog_subject_relation bsr1 on bsr1.blog_id = b.blog_id
        left join dts_blog_subject bs1 on bs1.blog_subject_id = bsr1.blog_subject_id
        left join dts_blog_tag_relation dbtr on dbtr.blog_id = b.blog_id
        left join dts_blog_tag bt on bt.blog_tag_id = dbtr.blog_tag_id
        and b.state_code = 1001
        order by b.blog_id desc
    </select>

    <select id="selectBlogList" resultMap="BlogResult">
        select a.username ,a.nickname ,b.blog_id ,b.title ,b.create_date ,b.synopsis ,bt.blog_tag_id ,bt.tag_name
        from uts_author a
        left join dts_blog b on a.author_id = b.author_id
        left join dts_blog_tag_relation dbtr on dbtr.blog_id = b.blog_id
        left join dts_blog_tag bt on bt.blog_tag_id = dbtr.blog_tag_id
        <where>
            <if test="tagName != ''">
                upper(bt.tag_name) = upper(#{tagName})
            </if>
            and b.state_code = 1001
        </where>
        order by b.create_date desc
    </select>

    <select id="selectBlogList1000" resultMap="BlogResult">
        select blog_id,title from dts_blog limit 1000
    </select>
</mapper>