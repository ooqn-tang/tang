import { PropType, CSSProperties, InjectionKey } from 'vue';
import type { Size } from './interface';
import type { ExtractPublicPropTypes } from '../../_utils';
export interface AvatarGroupInjection {
    size?: Size | undefined;
}
interface AvatarOption {
    src: string;
}
export declare const avatarGroupInjectionKey: InjectionKey<AvatarGroupInjection>;
declare const avatarGroupProps: {
    readonly max: NumberConstructor;
    readonly maxStyle: PropType<string | CSSProperties>;
    readonly options: {
        readonly type: PropType<AvatarOption[]>;
        readonly default: () => never[];
    };
    readonly vertical: BooleanConstructor;
    readonly size: PropType<Size | undefined>;
};
export declare type AvatarGroupProps = ExtractPublicPropTypes<typeof avatarGroupProps>;
declare const _default: import("vue").DefineComponent<{
    readonly max: NumberConstructor;
    readonly maxStyle: PropType<string | CSSProperties>;
    readonly options: {
        readonly type: PropType<AvatarOption[]>;
        readonly default: () => never[];
    };
    readonly vertical: BooleanConstructor;
    readonly size: PropType<Size | undefined>;
}, {
    mergedClsPrefix: import("vue").ComputedRef<string>;
    restOptions: import("vue").ComputedRef<AvatarOption[] | undefined>;
    displayedOptions: import("vue").ComputedRef<AvatarOption[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly max?: unknown;
    readonly maxStyle?: unknown;
    readonly options?: unknown;
    readonly vertical?: unknown;
    readonly size?: unknown;
} & {
    vertical: boolean;
    options: AvatarOption[];
} & {
    size?: Size | undefined;
    max?: number | undefined;
    maxStyle?: string | CSSProperties | undefined;
}>, {
    vertical: boolean;
    options: AvatarOption[];
}>;
export default _default;
