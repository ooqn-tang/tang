import { VNodeChild, CSSProperties, PropType } from 'vue';
import type { MessageType } from './types';
import { MessageRenderMessage } from '..';
declare const _default: import("vue").DefineComponent<{
    render: PropType<MessageRenderMessage>;
    icon: PropType<() => VNodeChild>;
    type: {
        readonly type: PropType<MessageType>;
        readonly default: "info";
    };
    content: PropType<string | number | (() => VNodeChild)>;
    closable: BooleanConstructor;
    keepAliveOnHover: BooleanConstructor;
    onClose: PropType<() => void>;
    onMouseenter: PropType<(e: MouseEvent) => void>;
    onMouseleave: PropType<(e: MouseEvent) => void>;
}, {
    mergedClsPrefix: import("vue").Ref<string>;
    messageProviderProps: {
        to?: unknown;
        duration?: unknown;
        keepAliveOnHover?: unknown;
        max?: unknown;
        placement?: unknown;
        closable?: unknown;
        containerStyle?: unknown;
        theme?: unknown;
        themeOverrides?: unknown;
        builtinThemeOverrides?: unknown;
    } & {
        duration: number;
        placement: "bottom" | "top" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
        closable: boolean;
        keepAliveOnHover: boolean;
    } & {
        max?: number | undefined;
        to?: string | HTMLElement | undefined;
        theme?: import("../../_mixins").Theme<"Message", {
            textColorInfo: string;
            textColorSuccess: string;
            textColorError: string;
            textColorWarning: string;
            textColorLoading: string;
            colorInfo: string;
            colorSuccess: string;
            colorError: string;
            colorWarning: string;
            colorLoading: string;
            boxShadowInfo: string;
            boxShadowSuccess: string;
            boxShadowError: string;
            boxShadowWarning: string;
            boxShadowLoading: string;
            iconColorInfo: string;
            iconColorSuccess: string;
            iconColorWarning: string;
            iconColorError: string;
            iconColorLoading: string;
            closeColorInfo: string;
            closeColorHoverInfo: string;
            closeColorPressedInfo: string;
            closeColorSuccess: string;
            closeColorHoverSuccess: string;
            closeColorPressedSuccess: string;
            closeColorError: string;
            closeColorHoverError: string;
            closeColorPressedError: string;
            closeColorWarning: string;
            closeColorHoverWarning: string;
            closeColorPressedWarning: string;
            closeColorLoading: string;
            closeColorHoverLoading: string;
            closeColorPressedLoading: string;
            loadingColor: string;
            lineHeight: string;
            borderRadius: string;
            margin: string;
            padding: string;
            maxWidth: string;
            minWidth: string;
            iconMargin: string;
            closeMargin: string;
            closeSize: string;
            iconSize: string;
            fontSize: string;
        }, any> | undefined;
        themeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Message", {
            textColorInfo: string;
            textColorSuccess: string;
            textColorError: string;
            textColorWarning: string;
            textColorLoading: string;
            colorInfo: string;
            colorSuccess: string;
            colorError: string;
            colorWarning: string;
            colorLoading: string;
            boxShadowInfo: string;
            boxShadowSuccess: string;
            boxShadowError: string;
            boxShadowWarning: string;
            boxShadowLoading: string;
            iconColorInfo: string;
            iconColorSuccess: string;
            iconColorWarning: string;
            iconColorError: string;
            iconColorLoading: string;
            closeColorInfo: string;
            closeColorHoverInfo: string;
            closeColorPressedInfo: string;
            closeColorSuccess: string;
            closeColorHoverSuccess: string;
            closeColorPressedSuccess: string;
            closeColorError: string;
            closeColorHoverError: string;
            closeColorPressedError: string;
            closeColorWarning: string;
            closeColorHoverWarning: string;
            closeColorPressedWarning: string;
            closeColorLoading: string;
            closeColorHoverLoading: string;
            closeColorPressedLoading: string;
            loadingColor: string;
            lineHeight: string;
            borderRadius: string;
            margin: string;
            padding: string;
            maxWidth: string;
            minWidth: string;
            iconMargin: string;
            closeMargin: string;
            closeSize: string;
            iconSize: string;
            fontSize: string;
        }, any>> | undefined;
        builtinThemeOverrides?: import("../../_mixins/use-theme").ExtractThemeOverrides<import("../../_mixins").Theme<"Message", {
            textColorInfo: string;
            textColorSuccess: string;
            textColorError: string;
            textColorWarning: string;
            textColorLoading: string;
            colorInfo: string;
            colorSuccess: string;
            colorError: string;
            colorWarning: string;
            colorLoading: string;
            boxShadowInfo: string;
            boxShadowSuccess: string;
            boxShadowError: string;
            boxShadowWarning: string;
            boxShadowLoading: string;
            iconColorInfo: string;
            iconColorSuccess: string;
            iconColorWarning: string;
            iconColorError: string;
            iconColorLoading: string;
            closeColorInfo: string;
            closeColorHoverInfo: string;
            closeColorPressedInfo: string;
            closeColorSuccess: string;
            closeColorHoverSuccess: string;
            closeColorPressedSuccess: string;
            closeColorError: string;
            closeColorHoverError: string;
            closeColorPressedError: string;
            closeColorWarning: string;
            closeColorHoverWarning: string;
            closeColorPressedWarning: string;
            closeColorLoading: string;
            closeColorHoverLoading: string;
            closeColorPressedLoading: string;
            loadingColor: string;
            lineHeight: string;
            borderRadius: string;
            margin: string;
            padding: string;
            maxWidth: string;
            minWidth: string;
            iconMargin: string;
            closeMargin: string;
            closeSize: string;
            iconSize: string;
            fontSize: string;
        }, any>> | undefined;
        containerStyle?: string | CSSProperties | undefined;
    };
    handleClose(): void;
    cssVars: import("vue").ComputedRef<{
        '--n-bezier': string;
        '--n-margin': string;
        '--n-padding': string;
        '--n-max-width': string;
        '--n-font-size': string;
        '--n-icon-margin': string;
        '--n-icon-size': string;
        '--n-close-size': string;
        '--n-close-margin': string;
        '--n-text-color': string;
        '--n-color': string;
        '--n-box-shadow': string;
        '--n-icon-color-info': string;
        '--n-icon-color-success': string;
        '--n-icon-color-warning': string;
        '--n-icon-color-error': string;
        '--n-icon-color-loading': string;
        '--n-close-color': string;
        '--n-close-color-pressed': string;
        '--n-close-color-hover': string;
        '--n-line-height': string;
        '--n-border-radius': string;
    }>;
    placement: "bottom" | "top" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    render?: unknown;
    icon?: unknown;
    type?: unknown;
    content?: unknown;
    closable?: unknown;
    keepAliveOnHover?: unknown;
    onClose?: unknown;
    onMouseenter?: unknown;
    onMouseleave?: unknown;
} & {
    type: MessageType;
    closable: boolean;
    keepAliveOnHover: boolean;
} & {
    content?: string | number | (() => VNodeChild) | undefined;
    render?: MessageRenderMessage | undefined;
    icon?: (() => VNodeChild) | undefined;
    onMouseenter?: ((e: MouseEvent) => void) | undefined;
    onMouseleave?: ((e: MouseEvent) => void) | undefined;
    onClose?: (() => void) | undefined;
}>, {
    type: MessageType;
    closable: boolean;
    keepAliveOnHover: boolean;
}>;
export default _default;
