"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const lodash_1 = require("lodash");
const utils_1 = require("./utils");
const numberAnimationProps = {
    to: {
        type: Number,
        default: 0
    },
    precision: {
        type: Number,
        default: 0
    },
    showSeparator: Boolean,
    from: { type: Number, default: 0 },
    active: {
        type: Boolean,
        default: true
    },
    duration: {
        type: Number,
        default: 2000
    }
};
exports.default = (0, vue_1.defineComponent)({
    name: 'NumberAnimation',
    props: numberAnimationProps,
    setup(props) {
        const { duration } = props;
        const displayedValueRef = (0, vue_1.ref)(props.from);
        let animating = false;
        const onUpdate = (currentValue) => {
            displayedValueRef.value = currentValue;
        };
        const onFinish = () => {
            displayedValueRef.value = props.to;
            animating = false;
        };
        const animate = (from = props.from, to = props.to) => {
            animating = true;
            displayedValueRef.value = props.from;
            if (from !== to) {
                (0, utils_1.tween)({
                    from,
                    to,
                    duration: duration,
                    onUpdate,
                    onFinish
                });
            }
        };
        const formattedValueRef = (0, vue_1.computed)(() => {
            const formatted = (0, lodash_1.round)(displayedValueRef.value, props.precision).toFixed(props.precision);
            const splitValue = formatted.split('.');
            const integer = props.showSeparator
                ? Number(splitValue[0]).toLocaleString('en-US')
                : splitValue[0];
            const decimal = splitValue[1];
            return {
                integer,
                decimal
            };
        });
        function play() {
            if (animating)
                return;
            animate();
        }
        (0, vue_1.onMounted)(() => {
            (0, vue_1.watchEffect)(() => {
                if (props.active)
                    animate();
            });
        });
        const exposedMethods = { play };
        return Object.assign({ formattedValue: formattedValueRef }, exposedMethods);
    },
    render() {
        const { formattedValue: { integer, decimal } } = this;
        return [integer, decimal ? '.' : null, decimal];
    }
});
