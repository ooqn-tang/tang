{
  "version": 3,
  "sources": ["../tinymce/plugins/image/plugin.js", "../tinymce/plugins/image/index.js", "dep:tinymce_plugins_image"],
  "sourcesContent": ["/**\n * TinyMCE version 6.1.0 (2022-06-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const getPrototypeOf = Object.getPrototypeOf;\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType = type => value => typeOf(value) === type;\n    const isSimpleType = type => value => typeof value === type;\n    const eq = t => a => t === a;\n    const is = (value, constructor) => isObject(value) && hasProto(value, constructor, (o, proto) => getPrototypeOf(o) === proto);\n    const isString = isType('string');\n    const isObject = isType('object');\n    const isPlainObject = value => is(value, Object);\n    const isArray = isType('array');\n    const isNull = eq(null);\n    const isBoolean = isSimpleType('boolean');\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n    const isFunction = isSimpleType('function');\n    const isNumber = isSimpleType('number');\n    const isArrayOf = (value, pred) => {\n      if (isArray(value)) {\n        for (let i = 0, len = value.length; i < len; ++i) {\n          if (!pred(value[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n      return false;\n    };\n\n    const noop = () => {\n    };\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const keys = Object.keys;\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n    const objAcc = r => (x, i) => {\n      r[i] = x;\n    };\n    const internalFilter = (obj, pred, onTrue, onFalse) => {\n      const r = {};\n      each(obj, (x, i) => {\n        (pred(x, i) ? onTrue : onFalse)(x, i);\n      });\n      return r;\n    };\n    const filter = (obj, pred) => {\n      const t = {};\n      internalFilter(obj, pred, objAcc(t), noop);\n      return t;\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n    const hasNonNullableKey = (obj, key) => has(obj, key) && obj[key] !== undefined && obj[key] !== null;\n\n    const nativePush = Array.prototype.push;\n    const flatten = xs => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        if (!isArray(xs[i])) {\n          throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n        }\n        nativePush.apply(r, xs[i]);\n      }\n      return r;\n    };\n    const get = (xs, i) => i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n    const head = xs => get(xs, 0);\n    const findMap = (arr, f) => {\n      for (let i = 0; i < arr.length; i++) {\n        const r = f(arr[i], i);\n        if (r.isSome()) {\n          return r;\n        }\n      }\n      return Optional.none();\n    };\n\n    typeof window !== 'undefined' ? window : Function('return this;')();\n\n    const rawSet = (dom, key, value) => {\n      if (isString(value) || isBoolean(value) || isNumber(value)) {\n        dom.setAttribute(key, value + '');\n      } else {\n        console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n        throw new Error('Attribute value was not simple');\n      }\n    };\n    const set = (element, key, value) => {\n      rawSet(element.dom, key, value);\n    };\n    const remove = (element, key) => {\n      element.dom.removeAttribute(key);\n    };\n\n    const fromHtml = (html, scope) => {\n      const doc = scope || document;\n      const div = doc.createElement('div');\n      div.innerHTML = html;\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        const message = 'HTML does not have a single root node';\n        console.error(message, html);\n        throw new Error(message);\n      }\n      return fromDom(div.childNodes[0]);\n    };\n    const fromTag = (tag, scope) => {\n      const doc = scope || document;\n      const node = doc.createElement(tag);\n      return fromDom(node);\n    };\n    const fromText = (text, scope) => {\n      const doc = scope || document;\n      const node = doc.createTextNode(text);\n      return fromDom(node);\n    };\n    const fromDom = node => {\n      if (node === null || node === undefined) {\n        throw new Error('Node cannot be null or undefined');\n      }\n      return { dom: node };\n    };\n    const fromPoint = (docElm, x, y) => Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n    const SugarElement = {\n      fromHtml,\n      fromTag,\n      fromText,\n      fromDom,\n      fromPoint\n    };\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.URI');\n\n    const isNotEmpty = s => s.length > 0;\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('image_dimensions', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('image_advtab', {\n        processor: 'boolean',\n        default: false\n      });\n      registerOption('image_uploadtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('image_prepend_url', {\n        processor: 'string',\n        default: ''\n      });\n      registerOption('image_class_list', { processor: 'object[]' });\n      registerOption('image_description', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('image_title', {\n        processor: 'boolean',\n        default: false\n      });\n      registerOption('image_caption', {\n        processor: 'boolean',\n        default: false\n      });\n      registerOption('image_list', {\n        processor: value => {\n          const valid = value === false || isString(value) || isArrayOf(value, isObject) || isFunction(value);\n          return valid ? {\n            value,\n            valid\n          } : {\n            valid: false,\n            message: 'Must be false, a string, an array or a function.'\n          };\n        },\n        default: false\n      });\n    };\n    const hasDimensions = option('image_dimensions');\n    const hasAdvTab = option('image_advtab');\n    const hasUploadTab = option('image_uploadtab');\n    const getPrependUrl = option('image_prepend_url');\n    const getClassList = option('image_class_list');\n    const hasDescription = option('image_description');\n    const hasImageTitle = option('image_title');\n    const hasImageCaption = option('image_caption');\n    const getImageList = option('image_list');\n    const showAccessibilityOptions = option('a11y_advanced_options');\n    const isAutomaticUploadsEnabled = option('automatic_uploads');\n    const hasUploadUrl = editor => isNotEmpty(editor.options.get('images_upload_url'));\n    const hasUploadHandler = editor => isNonNullable(editor.options.get('images_upload_handler'));\n\n    const parseIntAndGetMax = (val1, val2) => Math.max(parseInt(val1, 10), parseInt(val2, 10));\n    const getImageSize = url => new Promise(callback => {\n      const img = document.createElement('img');\n      const done = dimensions => {\n        img.onload = img.onerror = null;\n        if (img.parentNode) {\n          img.parentNode.removeChild(img);\n        }\n        callback(dimensions);\n      };\n      img.onload = () => {\n        const width = parseIntAndGetMax(img.width, img.clientWidth);\n        const height = parseIntAndGetMax(img.height, img.clientHeight);\n        const dimensions = {\n          width,\n          height\n        };\n        done(Promise.resolve(dimensions));\n      };\n      img.onerror = () => {\n        done(Promise.reject(`Failed to get image dimensions for: ${ url }`));\n      };\n      const style = img.style;\n      style.visibility = 'hidden';\n      style.position = 'fixed';\n      style.bottom = style.left = '0px';\n      style.width = style.height = 'auto';\n      document.body.appendChild(img);\n      img.src = url;\n    });\n    const removePixelSuffix = value => {\n      if (value) {\n        value = value.replace(/px$/, '');\n      }\n      return value;\n    };\n    const addPixelSuffix = value => {\n      if (value.length > 0 && /^[0-9]+$/.test(value)) {\n        value += 'px';\n      }\n      return value;\n    };\n    const mergeMargins = css => {\n      if (css.margin) {\n        const splitMargin = String(css.margin).split(' ');\n        switch (splitMargin.length) {\n        case 1:\n          css['margin-top'] = css['margin-top'] || splitMargin[0];\n          css['margin-right'] = css['margin-right'] || splitMargin[0];\n          css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];\n          css['margin-left'] = css['margin-left'] || splitMargin[0];\n          break;\n        case 2:\n          css['margin-top'] = css['margin-top'] || splitMargin[0];\n          css['margin-right'] = css['margin-right'] || splitMargin[1];\n          css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];\n          css['margin-left'] = css['margin-left'] || splitMargin[1];\n          break;\n        case 3:\n          css['margin-top'] = css['margin-top'] || splitMargin[0];\n          css['margin-right'] = css['margin-right'] || splitMargin[1];\n          css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];\n          css['margin-left'] = css['margin-left'] || splitMargin[1];\n          break;\n        case 4:\n          css['margin-top'] = css['margin-top'] || splitMargin[0];\n          css['margin-right'] = css['margin-right'] || splitMargin[1];\n          css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];\n          css['margin-left'] = css['margin-left'] || splitMargin[3];\n        }\n        delete css.margin;\n      }\n      return css;\n    };\n    const createImageList = (editor, callback) => {\n      const imageList = getImageList(editor);\n      if (isString(imageList)) {\n        fetch(imageList).then(res => {\n          if (res.ok) {\n            res.json().then(callback);\n          }\n        });\n      } else if (isFunction(imageList)) {\n        imageList(callback);\n      } else {\n        callback(imageList);\n      }\n    };\n    const waitLoadImage = (editor, data, imgElm) => {\n      const selectImage = () => {\n        imgElm.onload = imgElm.onerror = null;\n        if (editor.selection) {\n          editor.selection.select(imgElm);\n          editor.nodeChanged();\n        }\n      };\n      imgElm.onload = () => {\n        if (!data.width && !data.height && hasDimensions(editor)) {\n          editor.dom.setAttribs(imgElm, {\n            width: String(imgElm.clientWidth),\n            height: String(imgElm.clientHeight)\n          });\n        }\n        selectImage();\n      };\n      imgElm.onerror = selectImage;\n    };\n    const blobToDataUri = blob => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.onerror = () => {\n        reject(reader.error.message);\n      };\n      reader.readAsDataURL(blob);\n    });\n    const isPlaceholderImage = imgElm => imgElm.nodeName === 'IMG' && (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    const isSafeImageUrl = (editor, src) => {\n      const getOption = editor.options.get;\n      return global$2.isDomSafe(src, 'img', {\n        allow_html_data_urls: getOption('allow_html_data_urls'),\n        allow_script_urls: getOption('allow_script_urls'),\n        allow_svg_data_urls: getOption('allow_svg_data_urls')\n      });\n    };\n\n    const DOM = global$3.DOM;\n    const getHspace = image => {\n      if (image.style.marginLeft && image.style.marginRight && image.style.marginLeft === image.style.marginRight) {\n        return removePixelSuffix(image.style.marginLeft);\n      } else {\n        return '';\n      }\n    };\n    const getVspace = image => {\n      if (image.style.marginTop && image.style.marginBottom && image.style.marginTop === image.style.marginBottom) {\n        return removePixelSuffix(image.style.marginTop);\n      } else {\n        return '';\n      }\n    };\n    const getBorder = image => {\n      if (image.style.borderWidth) {\n        return removePixelSuffix(image.style.borderWidth);\n      } else {\n        return '';\n      }\n    };\n    const getAttrib = (image, name) => {\n      if (image.hasAttribute(name)) {\n        return image.getAttribute(name);\n      } else {\n        return '';\n      }\n    };\n    const getStyle = (image, name) => image.style[name] ? image.style[name] : '';\n    const hasCaption = image => image.parentNode !== null && image.parentNode.nodeName === 'FIGURE';\n    const updateAttrib = (image, name, value) => {\n      if (value === '') {\n        image.removeAttribute(name);\n      } else {\n        image.setAttribute(name, value);\n      }\n    };\n    const wrapInFigure = image => {\n      const figureElm = DOM.create('figure', { class: 'image' });\n      DOM.insertAfter(figureElm, image);\n      figureElm.appendChild(image);\n      figureElm.appendChild(DOM.create('figcaption', { contentEditable: 'true' }, 'Caption'));\n      figureElm.contentEditable = 'false';\n    };\n    const removeFigure = image => {\n      const figureElm = image.parentNode;\n      DOM.insertAfter(image, figureElm);\n      DOM.remove(figureElm);\n    };\n    const toggleCaption = image => {\n      if (hasCaption(image)) {\n        removeFigure(image);\n      } else {\n        wrapInFigure(image);\n      }\n    };\n    const normalizeStyle = (image, normalizeCss) => {\n      const attrValue = image.getAttribute('style');\n      const value = normalizeCss(attrValue !== null ? attrValue : '');\n      if (value.length > 0) {\n        image.setAttribute('style', value);\n        image.setAttribute('data-mce-style', value);\n      } else {\n        image.removeAttribute('style');\n      }\n    };\n    const setSize = (name, normalizeCss) => (image, name, value) => {\n      if (image.style[name]) {\n        image.style[name] = addPixelSuffix(value);\n        normalizeStyle(image, normalizeCss);\n      } else {\n        updateAttrib(image, name, value);\n      }\n    };\n    const getSize = (image, name) => {\n      if (image.style[name]) {\n        return removePixelSuffix(image.style[name]);\n      } else {\n        return getAttrib(image, name);\n      }\n    };\n    const setHspace = (image, value) => {\n      const pxValue = addPixelSuffix(value);\n      image.style.marginLeft = pxValue;\n      image.style.marginRight = pxValue;\n    };\n    const setVspace = (image, value) => {\n      const pxValue = addPixelSuffix(value);\n      image.style.marginTop = pxValue;\n      image.style.marginBottom = pxValue;\n    };\n    const setBorder = (image, value) => {\n      const pxValue = addPixelSuffix(value);\n      image.style.borderWidth = pxValue;\n    };\n    const setBorderStyle = (image, value) => {\n      image.style.borderStyle = value;\n    };\n    const getBorderStyle = image => getStyle(image, 'borderStyle');\n    const isFigure = elm => elm.nodeName === 'FIGURE';\n    const isImage = elm => elm.nodeName === 'IMG';\n    const getIsDecorative = image => DOM.getAttrib(image, 'alt').length === 0 && DOM.getAttrib(image, 'role') === 'presentation';\n    const getAlt = image => {\n      if (getIsDecorative(image)) {\n        return '';\n      } else {\n        return getAttrib(image, 'alt');\n      }\n    };\n    const defaultData = () => ({\n      src: '',\n      alt: '',\n      title: '',\n      width: '',\n      height: '',\n      class: '',\n      style: '',\n      caption: false,\n      hspace: '',\n      vspace: '',\n      border: '',\n      borderStyle: '',\n      isDecorative: false\n    });\n    const getStyleValue = (normalizeCss, data) => {\n      const image = document.createElement('img');\n      updateAttrib(image, 'style', data.style);\n      if (getHspace(image) || data.hspace !== '') {\n        setHspace(image, data.hspace);\n      }\n      if (getVspace(image) || data.vspace !== '') {\n        setVspace(image, data.vspace);\n      }\n      if (getBorder(image) || data.border !== '') {\n        setBorder(image, data.border);\n      }\n      if (getBorderStyle(image) || data.borderStyle !== '') {\n        setBorderStyle(image, data.borderStyle);\n      }\n      return normalizeCss(image.getAttribute('style'));\n    };\n    const create = (normalizeCss, data) => {\n      const image = document.createElement('img');\n      write(normalizeCss, {\n        ...data,\n        caption: false\n      }, image);\n      setAlt(image, data.alt, data.isDecorative);\n      if (data.caption) {\n        const figure = DOM.create('figure', { class: 'image' });\n        figure.appendChild(image);\n        figure.appendChild(DOM.create('figcaption', { contentEditable: 'true' }, 'Caption'));\n        figure.contentEditable = 'false';\n        return figure;\n      } else {\n        return image;\n      }\n    };\n    const read = (normalizeCss, image) => ({\n      src: getAttrib(image, 'src'),\n      alt: getAlt(image),\n      title: getAttrib(image, 'title'),\n      width: getSize(image, 'width'),\n      height: getSize(image, 'height'),\n      class: getAttrib(image, 'class'),\n      style: normalizeCss(getAttrib(image, 'style')),\n      caption: hasCaption(image),\n      hspace: getHspace(image),\n      vspace: getVspace(image),\n      border: getBorder(image),\n      borderStyle: getStyle(image, 'borderStyle'),\n      isDecorative: getIsDecorative(image)\n    });\n    const updateProp = (image, oldData, newData, name, set) => {\n      if (newData[name] !== oldData[name]) {\n        set(image, name, newData[name]);\n      }\n    };\n    const setAlt = (image, alt, isDecorative) => {\n      if (isDecorative) {\n        DOM.setAttrib(image, 'role', 'presentation');\n        const sugarImage = SugarElement.fromDom(image);\n        set(sugarImage, 'alt', '');\n      } else {\n        if (isNull(alt)) {\n          const sugarImage = SugarElement.fromDom(image);\n          remove(sugarImage, 'alt');\n        } else {\n          const sugarImage = SugarElement.fromDom(image);\n          set(sugarImage, 'alt', alt);\n        }\n        if (DOM.getAttrib(image, 'role') === 'presentation') {\n          DOM.setAttrib(image, 'role', '');\n        }\n      }\n    };\n    const updateAlt = (image, oldData, newData) => {\n      if (newData.alt !== oldData.alt || newData.isDecorative !== oldData.isDecorative) {\n        setAlt(image, newData.alt, newData.isDecorative);\n      }\n    };\n    const normalized = (set, normalizeCss) => (image, name, value) => {\n      set(image, value);\n      normalizeStyle(image, normalizeCss);\n    };\n    const write = (normalizeCss, newData, image) => {\n      const oldData = read(normalizeCss, image);\n      updateProp(image, oldData, newData, 'caption', (image, _name, _value) => toggleCaption(image));\n      updateProp(image, oldData, newData, 'src', updateAttrib);\n      updateProp(image, oldData, newData, 'title', updateAttrib);\n      updateProp(image, oldData, newData, 'width', setSize('width', normalizeCss));\n      updateProp(image, oldData, newData, 'height', setSize('height', normalizeCss));\n      updateProp(image, oldData, newData, 'class', updateAttrib);\n      updateProp(image, oldData, newData, 'style', normalized((image, value) => updateAttrib(image, 'style', value), normalizeCss));\n      updateProp(image, oldData, newData, 'hspace', normalized(setHspace, normalizeCss));\n      updateProp(image, oldData, newData, 'vspace', normalized(setVspace, normalizeCss));\n      updateProp(image, oldData, newData, 'border', normalized(setBorder, normalizeCss));\n      updateProp(image, oldData, newData, 'borderStyle', normalized(setBorderStyle, normalizeCss));\n      updateAlt(image, oldData, newData);\n    };\n\n    const normalizeCss$1 = (editor, cssText) => {\n      const css = editor.dom.styles.parse(cssText);\n      const mergedCss = mergeMargins(css);\n      const compressed = editor.dom.styles.parse(editor.dom.styles.serialize(mergedCss));\n      return editor.dom.styles.serialize(compressed);\n    };\n    const getSelectedImage = editor => {\n      const imgElm = editor.selection.getNode();\n      const figureElm = editor.dom.getParent(imgElm, 'figure.image');\n      if (figureElm) {\n        return editor.dom.select('img', figureElm)[0];\n      }\n      if (imgElm && (imgElm.nodeName !== 'IMG' || isPlaceholderImage(imgElm))) {\n        return null;\n      }\n      return imgElm;\n    };\n    const splitTextBlock = (editor, figure) => {\n      const dom = editor.dom;\n      const textBlockElements = filter(editor.schema.getTextBlockElements(), (_, parentElm) => !editor.schema.isValidChild(parentElm, 'figure'));\n      const textBlock = dom.getParent(figure.parentNode, node => hasNonNullableKey(textBlockElements, node.nodeName), editor.getBody());\n      if (textBlock) {\n        return dom.split(textBlock, figure);\n      } else {\n        return figure;\n      }\n    };\n    const readImageDataFromSelection = editor => {\n      const image = getSelectedImage(editor);\n      return image ? read(css => normalizeCss$1(editor, css), image) : defaultData();\n    };\n    const insertImageAtCaret = (editor, data) => {\n      const elm = create(css => normalizeCss$1(editor, css), data);\n      editor.dom.setAttrib(elm, 'data-mce-id', '__mcenew');\n      editor.focus();\n      editor.selection.setContent(elm.outerHTML);\n      const insertedElm = editor.dom.select('*[data-mce-id=\"__mcenew\"]')[0];\n      editor.dom.setAttrib(insertedElm, 'data-mce-id', null);\n      if (isFigure(insertedElm)) {\n        const figure = splitTextBlock(editor, insertedElm);\n        editor.selection.select(figure);\n      } else {\n        editor.selection.select(insertedElm);\n      }\n    };\n    const syncSrcAttr = (editor, image) => {\n      editor.dom.setAttrib(image, 'src', image.getAttribute('src'));\n    };\n    const deleteImage = (editor, image) => {\n      if (image) {\n        const elm = editor.dom.is(image.parentNode, 'figure.image') ? image.parentNode : image;\n        editor.dom.remove(elm);\n        editor.focus();\n        editor.nodeChanged();\n        if (editor.dom.isEmpty(editor.getBody())) {\n          editor.setContent('');\n          editor.selection.setCursorLocation();\n        }\n      }\n    };\n    const writeImageDataToSelection = (editor, data) => {\n      const image = getSelectedImage(editor);\n      write(css => normalizeCss$1(editor, css), data, image);\n      syncSrcAttr(editor, image);\n      if (isFigure(image.parentNode)) {\n        const figure = image.parentNode;\n        splitTextBlock(editor, figure);\n        editor.selection.select(image.parentNode);\n      } else {\n        editor.selection.select(image);\n        waitLoadImage(editor, data, image);\n      }\n    };\n    const sanitizeImageData = (editor, data) => {\n      const src = data.src;\n      return {\n        ...data,\n        src: isSafeImageUrl(editor, src) ? src : ''\n      };\n    };\n    const insertOrUpdateImage = (editor, partialData) => {\n      const image = getSelectedImage(editor);\n      if (image) {\n        const selectedImageData = read(css => normalizeCss$1(editor, css), image);\n        const data = {\n          ...selectedImageData,\n          ...partialData\n        };\n        const sanitizedData = sanitizeImageData(editor, data);\n        if (data.src) {\n          writeImageDataToSelection(editor, sanitizedData);\n        } else {\n          deleteImage(editor, image);\n        }\n      } else if (partialData.src) {\n        insertImageAtCaret(editor, {\n          ...defaultData(),\n          ...partialData\n        });\n      }\n    };\n\n    const deep = (old, nu) => {\n      const bothObjects = isPlainObject(old) && isPlainObject(nu);\n      return bothObjects ? deepMerge(old, nu) : nu;\n    };\n    const baseMerge = merger => {\n      return (...objects) => {\n        if (objects.length === 0) {\n          throw new Error(`Can't merge zero objects`);\n        }\n        const ret = {};\n        for (let j = 0; j < objects.length; j++) {\n          const curObject = objects[j];\n          for (const key in curObject) {\n            if (has(curObject, key)) {\n              ret[key] = merger(ret[key], curObject[key]);\n            }\n          }\n        }\n        return ret;\n      };\n    };\n    const deepMerge = baseMerge(deep);\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.ImageUploader');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const getValue = item => isString(item.value) ? item.value : '';\n    const getText = item => {\n      if (isString(item.text)) {\n        return item.text;\n      } else if (isString(item.title)) {\n        return item.title;\n      } else {\n        return '';\n      }\n    };\n    const sanitizeList = (list, extractValue) => {\n      const out = [];\n      global.each(list, item => {\n        const text = getText(item);\n        if (item.menu !== undefined) {\n          const items = sanitizeList(item.menu, extractValue);\n          out.push({\n            text,\n            items\n          });\n        } else {\n          const value = extractValue(item);\n          out.push({\n            text,\n            value\n          });\n        }\n      });\n      return out;\n    };\n    const sanitizer = (extractor = getValue) => list => {\n      if (list) {\n        return Optional.from(list).map(list => sanitizeList(list, extractor));\n      } else {\n        return Optional.none();\n      }\n    };\n    const sanitize = list => sanitizer(getValue)(list);\n    const isGroup = item => has(item, 'items');\n    const findEntryDelegate = (list, value) => findMap(list, item => {\n      if (isGroup(item)) {\n        return findEntryDelegate(item.items, value);\n      } else if (item.value === value) {\n        return Optional.some(item);\n      } else {\n        return Optional.none();\n      }\n    });\n    const findEntry = (optList, value) => optList.bind(list => findEntryDelegate(list, value));\n    const ListUtils = {\n      sanitizer,\n      sanitize,\n      findEntry\n    };\n\n    const makeTab$2 = _info => ({\n      title: 'Advanced',\n      name: 'advanced',\n      items: [{\n          type: 'grid',\n          columns: 2,\n          items: [\n            {\n              type: 'input',\n              label: 'Vertical space',\n              name: 'vspace',\n              inputMode: 'numeric'\n            },\n            {\n              type: 'input',\n              label: 'Horizontal space',\n              name: 'hspace',\n              inputMode: 'numeric'\n            },\n            {\n              type: 'input',\n              label: 'Border width',\n              name: 'border',\n              inputMode: 'numeric'\n            },\n            {\n              type: 'listbox',\n              name: 'borderstyle',\n              label: 'Border style',\n              items: [\n                {\n                  text: 'Select...',\n                  value: ''\n                },\n                {\n                  text: 'Solid',\n                  value: 'solid'\n                },\n                {\n                  text: 'Dotted',\n                  value: 'dotted'\n                },\n                {\n                  text: 'Dashed',\n                  value: 'dashed'\n                },\n                {\n                  text: 'Double',\n                  value: 'double'\n                },\n                {\n                  text: 'Groove',\n                  value: 'groove'\n                },\n                {\n                  text: 'Ridge',\n                  value: 'ridge'\n                },\n                {\n                  text: 'Inset',\n                  value: 'inset'\n                },\n                {\n                  text: 'Outset',\n                  value: 'outset'\n                },\n                {\n                  text: 'None',\n                  value: 'none'\n                },\n                {\n                  text: 'Hidden',\n                  value: 'hidden'\n                }\n              ]\n            }\n          ]\n        }]\n    });\n    const AdvTab = { makeTab: makeTab$2 };\n\n    const collect = editor => {\n      const urlListSanitizer = ListUtils.sanitizer(item => editor.convertURL(item.value || item.url, 'src'));\n      const futureImageList = new Promise(completer => {\n        createImageList(editor, imageList => {\n          completer(urlListSanitizer(imageList).map(items => flatten([\n            [{\n                text: 'None',\n                value: ''\n              }],\n            items\n          ])));\n        });\n      });\n      const classList = ListUtils.sanitize(getClassList(editor));\n      const hasAdvTab$1 = hasAdvTab(editor);\n      const hasUploadTab$1 = hasUploadTab(editor);\n      const hasUploadUrl$1 = hasUploadUrl(editor);\n      const hasUploadHandler$1 = hasUploadHandler(editor);\n      const image = readImageDataFromSelection(editor);\n      const hasDescription$1 = hasDescription(editor);\n      const hasImageTitle$1 = hasImageTitle(editor);\n      const hasDimensions$1 = hasDimensions(editor);\n      const hasImageCaption$1 = hasImageCaption(editor);\n      const hasAccessibilityOptions = showAccessibilityOptions(editor);\n      const automaticUploads = isAutomaticUploadsEnabled(editor);\n      const prependURL = Optional.some(getPrependUrl(editor)).filter(preUrl => isString(preUrl) && preUrl.length > 0);\n      return futureImageList.then(imageList => ({\n        image,\n        imageList,\n        classList,\n        hasAdvTab: hasAdvTab$1,\n        hasUploadTab: hasUploadTab$1,\n        hasUploadUrl: hasUploadUrl$1,\n        hasUploadHandler: hasUploadHandler$1,\n        hasDescription: hasDescription$1,\n        hasImageTitle: hasImageTitle$1,\n        hasDimensions: hasDimensions$1,\n        hasImageCaption: hasImageCaption$1,\n        prependURL,\n        hasAccessibilityOptions,\n        automaticUploads\n      }));\n    };\n\n    const makeItems = info => {\n      const imageUrl = {\n        name: 'src',\n        type: 'urlinput',\n        filetype: 'image',\n        label: 'Source'\n      };\n      const imageList = info.imageList.map(items => ({\n        name: 'images',\n        type: 'listbox',\n        label: 'Image list',\n        items\n      }));\n      const imageDescription = {\n        name: 'alt',\n        type: 'input',\n        label: 'Alternative description',\n        enabled: !(info.hasAccessibilityOptions && info.image.isDecorative)\n      };\n      const imageTitle = {\n        name: 'title',\n        type: 'input',\n        label: 'Image title'\n      };\n      const imageDimensions = {\n        name: 'dimensions',\n        type: 'sizeinput'\n      };\n      const isDecorative = {\n        type: 'label',\n        label: 'Accessibility',\n        items: [{\n            name: 'isDecorative',\n            type: 'checkbox',\n            label: 'Image is decorative'\n          }]\n      };\n      const classList = info.classList.map(items => ({\n        name: 'classes',\n        type: 'listbox',\n        label: 'Class',\n        items\n      }));\n      const caption = {\n        type: 'label',\n        label: 'Caption',\n        items: [{\n            type: 'checkbox',\n            name: 'caption',\n            label: 'Show caption'\n          }]\n      };\n      const getDialogContainerType = useColumns => useColumns ? {\n        type: 'grid',\n        columns: 2\n      } : { type: 'panel' };\n      return flatten([\n        [imageUrl],\n        imageList.toArray(),\n        info.hasAccessibilityOptions && info.hasDescription ? [isDecorative] : [],\n        info.hasDescription ? [imageDescription] : [],\n        info.hasImageTitle ? [imageTitle] : [],\n        info.hasDimensions ? [imageDimensions] : [],\n        [{\n            ...getDialogContainerType(info.classList.isSome() && info.hasImageCaption),\n            items: flatten([\n              classList.toArray(),\n              info.hasImageCaption ? [caption] : []\n            ])\n          }]\n      ]);\n    };\n    const makeTab$1 = info => ({\n      title: 'General',\n      name: 'general',\n      items: makeItems(info)\n    });\n    const MainTab = {\n      makeTab: makeTab$1,\n      makeItems\n    };\n\n    const makeTab = _info => {\n      const items = [{\n          type: 'dropzone',\n          name: 'fileinput'\n        }];\n      return {\n        title: 'Upload',\n        name: 'upload',\n        items\n      };\n    };\n    const UploadTab = { makeTab };\n\n    const createState = info => ({\n      prevImage: ListUtils.findEntry(info.imageList, info.image.src),\n      prevAlt: info.image.alt,\n      open: true\n    });\n    const fromImageData = image => ({\n      src: {\n        value: image.src,\n        meta: {}\n      },\n      images: image.src,\n      alt: image.alt,\n      title: image.title,\n      dimensions: {\n        width: image.width,\n        height: image.height\n      },\n      classes: image.class,\n      caption: image.caption,\n      style: image.style,\n      vspace: image.vspace,\n      border: image.border,\n      hspace: image.hspace,\n      borderstyle: image.borderStyle,\n      fileinput: [],\n      isDecorative: image.isDecorative\n    });\n    const toImageData = (data, removeEmptyAlt) => ({\n      src: data.src.value,\n      alt: data.alt.length === 0 && removeEmptyAlt ? null : data.alt,\n      title: data.title,\n      width: data.dimensions.width,\n      height: data.dimensions.height,\n      class: data.classes,\n      style: data.style,\n      caption: data.caption,\n      hspace: data.hspace,\n      vspace: data.vspace,\n      border: data.border,\n      borderStyle: data.borderstyle,\n      isDecorative: data.isDecorative\n    });\n    const addPrependUrl2 = (info, srcURL) => {\n      if (!/^(?:[a-zA-Z]+:)?\\/\\//.test(srcURL)) {\n        return info.prependURL.bind(prependUrl => {\n          if (srcURL.substring(0, prependUrl.length) !== prependUrl) {\n            return Optional.some(prependUrl + srcURL);\n          }\n          return Optional.none();\n        });\n      }\n      return Optional.none();\n    };\n    const addPrependUrl = (info, api) => {\n      const data = api.getData();\n      addPrependUrl2(info, data.src.value).each(srcURL => {\n        api.setData({\n          src: {\n            value: srcURL,\n            meta: data.src.meta\n          }\n        });\n      });\n    };\n    const formFillFromMeta2 = (info, data, meta) => {\n      if (info.hasDescription && isString(meta.alt)) {\n        data.alt = meta.alt;\n      }\n      if (info.hasAccessibilityOptions) {\n        data.isDecorative = meta.isDecorative || data.isDecorative || false;\n      }\n      if (info.hasImageTitle && isString(meta.title)) {\n        data.title = meta.title;\n      }\n      if (info.hasDimensions) {\n        if (isString(meta.width)) {\n          data.dimensions.width = meta.width;\n        }\n        if (isString(meta.height)) {\n          data.dimensions.height = meta.height;\n        }\n      }\n      if (isString(meta.class)) {\n        ListUtils.findEntry(info.classList, meta.class).each(entry => {\n          data.classes = entry.value;\n        });\n      }\n      if (info.hasImageCaption) {\n        if (isBoolean(meta.caption)) {\n          data.caption = meta.caption;\n        }\n      }\n      if (info.hasAdvTab) {\n        if (isString(meta.style)) {\n          data.style = meta.style;\n        }\n        if (isString(meta.vspace)) {\n          data.vspace = meta.vspace;\n        }\n        if (isString(meta.border)) {\n          data.border = meta.border;\n        }\n        if (isString(meta.hspace)) {\n          data.hspace = meta.hspace;\n        }\n        if (isString(meta.borderstyle)) {\n          data.borderstyle = meta.borderstyle;\n        }\n      }\n    };\n    const formFillFromMeta = (info, api) => {\n      const data = api.getData();\n      const meta = data.src.meta;\n      if (meta !== undefined) {\n        const newData = deepMerge({}, data);\n        formFillFromMeta2(info, newData, meta);\n        api.setData(newData);\n      }\n    };\n    const calculateImageSize = (helpers, info, state, api) => {\n      const data = api.getData();\n      const url = data.src.value;\n      const meta = data.src.meta || {};\n      if (!meta.width && !meta.height && info.hasDimensions) {\n        if (isNotEmpty(url)) {\n          helpers.imageSize(url).then(size => {\n            if (state.open) {\n              api.setData({ dimensions: size });\n            }\n          }).catch(e => console.error(e));\n        } else {\n          api.setData({\n            dimensions: {\n              width: '',\n              height: ''\n            }\n          });\n        }\n      }\n    };\n    const updateImagesDropdown = (info, state, api) => {\n      const data = api.getData();\n      const image = ListUtils.findEntry(info.imageList, data.src.value);\n      state.prevImage = image;\n      api.setData({ images: image.map(entry => entry.value).getOr('') });\n    };\n    const changeSrc = (helpers, info, state, api) => {\n      addPrependUrl(info, api);\n      formFillFromMeta(info, api);\n      calculateImageSize(helpers, info, state, api);\n      updateImagesDropdown(info, state, api);\n    };\n    const changeImages = (helpers, info, state, api) => {\n      const data = api.getData();\n      const image = ListUtils.findEntry(info.imageList, data.images);\n      image.each(img => {\n        const updateAlt = data.alt === '' || state.prevImage.map(image => image.text === data.alt).getOr(false);\n        if (updateAlt) {\n          if (img.value === '') {\n            api.setData({\n              src: img,\n              alt: state.prevAlt\n            });\n          } else {\n            api.setData({\n              src: img,\n              alt: img.text\n            });\n          }\n        } else {\n          api.setData({ src: img });\n        }\n      });\n      state.prevImage = image;\n      changeSrc(helpers, info, state, api);\n    };\n    const changeFileInput = (helpers, info, state, api) => {\n      const data = api.getData();\n      api.block('Uploading image');\n      head(data.fileinput).fold(() => {\n        api.unblock();\n      }, file => {\n        const blobUri = URL.createObjectURL(file);\n        const finalize = () => {\n          api.unblock();\n          URL.revokeObjectURL(blobUri);\n        };\n        const updateSrcAndSwitchTab = url => {\n          api.setData({\n            src: {\n              value: url,\n              meta: {}\n            }\n          });\n          api.showTab('general');\n          changeSrc(helpers, info, state, api);\n        };\n        blobToDataUri(file).then(dataUrl => {\n          const blobInfo = helpers.createBlobCache(file, blobUri, dataUrl);\n          if (info.automaticUploads) {\n            helpers.uploadImage(blobInfo).then(result => {\n              updateSrcAndSwitchTab(result.url);\n              finalize();\n            }).catch(err => {\n              finalize();\n              helpers.alertErr(err);\n            });\n          } else {\n            helpers.addToBlobCache(blobInfo);\n            updateSrcAndSwitchTab(blobInfo.blobUri());\n            api.unblock();\n          }\n        });\n      });\n    };\n    const changeHandler = (helpers, info, state) => (api, evt) => {\n      if (evt.name === 'src') {\n        changeSrc(helpers, info, state, api);\n      } else if (evt.name === 'images') {\n        changeImages(helpers, info, state, api);\n      } else if (evt.name === 'alt') {\n        state.prevAlt = api.getData().alt;\n      } else if (evt.name === 'fileinput') {\n        changeFileInput(helpers, info, state, api);\n      } else if (evt.name === 'isDecorative') {\n        api.setEnabled('alt', !api.getData().isDecorative);\n      }\n    };\n    const closeHandler = state => () => {\n      state.open = false;\n    };\n    const makeDialogBody = info => {\n      if (info.hasAdvTab || info.hasUploadUrl || info.hasUploadHandler) {\n        const tabPanel = {\n          type: 'tabpanel',\n          tabs: flatten([\n            [MainTab.makeTab(info)],\n            info.hasAdvTab ? [AdvTab.makeTab(info)] : [],\n            info.hasUploadTab && (info.hasUploadUrl || info.hasUploadHandler) ? [UploadTab.makeTab(info)] : []\n          ])\n        };\n        return tabPanel;\n      } else {\n        const panel = {\n          type: 'panel',\n          items: MainTab.makeItems(info)\n        };\n        return panel;\n      }\n    };\n    const submitHandler = (editor, info, helpers) => api => {\n      const data = deepMerge(fromImageData(info.image), api.getData());\n      const finalData = {\n        ...data,\n        style: getStyleValue(helpers.normalizeCss, toImageData(data, false))\n      };\n      editor.execCommand('mceUpdateImage', false, toImageData(finalData, info.hasAccessibilityOptions));\n      editor.editorUpload.uploadImagesAuto();\n      api.close();\n    };\n    const imageSize = editor => url => {\n      if (!isSafeImageUrl(editor, url)) {\n        return Promise.resolve({\n          width: '',\n          height: ''\n        });\n      } else {\n        return getImageSize(editor.documentBaseURI.toAbsolute(url)).then(dimensions => ({\n          width: String(dimensions.width),\n          height: String(dimensions.height)\n        }));\n      }\n    };\n    const createBlobCache = editor => (file, blobUri, dataUrl) => editor.editorUpload.blobCache.create({\n      blob: file,\n      blobUri,\n      name: file.name ? file.name.replace(/\\.[^\\.]+$/, '') : null,\n      filename: file.name,\n      base64: dataUrl.split(',')[1]\n    });\n    const addToBlobCache = editor => blobInfo => {\n      editor.editorUpload.blobCache.add(blobInfo);\n    };\n    const alertErr = editor => message => {\n      editor.windowManager.alert(message);\n    };\n    const normalizeCss = editor => cssText => normalizeCss$1(editor, cssText);\n    const parseStyle = editor => cssText => editor.dom.parseStyle(cssText);\n    const serializeStyle = editor => (stylesArg, name) => editor.dom.serializeStyle(stylesArg, name);\n    const uploadImage = editor => blobInfo => global$1(editor).upload([blobInfo], false).then(results => {\n      if (results.length === 0) {\n        return Promise.reject('Failed to upload image');\n      } else if (results[0].status === false) {\n        return Promise.reject(results[0].error.message);\n      } else {\n        return results[0];\n      }\n    });\n    const Dialog = editor => {\n      const helpers = {\n        imageSize: imageSize(editor),\n        addToBlobCache: addToBlobCache(editor),\n        createBlobCache: createBlobCache(editor),\n        alertErr: alertErr(editor),\n        normalizeCss: normalizeCss(editor),\n        parseStyle: parseStyle(editor),\n        serializeStyle: serializeStyle(editor),\n        uploadImage: uploadImage(editor)\n      };\n      const open = () => {\n        collect(editor).then(info => {\n          const state = createState(info);\n          return {\n            title: 'Insert/Edit Image',\n            size: 'normal',\n            body: makeDialogBody(info),\n            buttons: [\n              {\n                type: 'cancel',\n                name: 'cancel',\n                text: 'Cancel'\n              },\n              {\n                type: 'submit',\n                name: 'save',\n                text: 'Save',\n                primary: true\n              }\n            ],\n            initialData: fromImageData(info.image),\n            onSubmit: submitHandler(editor, info, helpers),\n            onChange: changeHandler(helpers, info, state),\n            onClose: closeHandler(state)\n          };\n        }).then(editor.windowManager.open);\n      };\n      return { open };\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mceImage', Dialog(editor).open);\n      editor.addCommand('mceUpdateImage', (_ui, data) => {\n        editor.undoManager.transact(() => insertOrUpdateImage(editor, data));\n      });\n    };\n\n    const hasImageClass = node => {\n      const className = node.attr('class');\n      return className && /\\bimage\\b/.test(className);\n    };\n    const toggleContentEditableState = state => nodes => {\n      let i = nodes.length;\n      const toggleContentEditable = node => {\n        node.attr('contenteditable', state ? 'true' : null);\n      };\n      while (i--) {\n        const node = nodes[i];\n        if (hasImageClass(node)) {\n          node.attr('contenteditable', state ? 'false' : null);\n          global.each(node.getAll('figcaption'), toggleContentEditable);\n        }\n      }\n    };\n    const setup = editor => {\n      editor.on('PreInit', () => {\n        editor.parser.addNodeFilter('figure', toggleContentEditableState(true));\n        editor.serializer.addNodeFilter('figure', toggleContentEditableState(false));\n      });\n    };\n\n    const register = editor => {\n      editor.ui.registry.addToggleButton('image', {\n        icon: 'image',\n        tooltip: 'Insert/edit image',\n        onAction: Dialog(editor).open,\n        onSetup: buttonApi => {\n          buttonApi.setActive(isNonNullable(getSelectedImage(editor)));\n          return editor.selection.selectorChangedWithUnbind('img:not([data-mce-object]):not([data-mce-placeholder]),figure.image', buttonApi.setActive).unbind;\n        }\n      });\n      editor.ui.registry.addMenuItem('image', {\n        icon: 'image',\n        text: 'Image...',\n        onAction: Dialog(editor).open\n      });\n      editor.ui.registry.addContextMenu('image', { update: element => isFigure(element) || isImage(element) && !isPlaceholderImage(element) ? ['image'] : [] });\n    };\n\n    var Plugin = () => {\n      global$4.add('image', editor => {\n        register$2(editor);\n        setup(editor);\n        register(editor);\n        register$1(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n", "// Exports the \"image\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/image')\n//   ES2015:\n//     import 'tinymce/plugins/image'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/image/index.js\");"],
  "mappings": "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",
  "names": []
}
