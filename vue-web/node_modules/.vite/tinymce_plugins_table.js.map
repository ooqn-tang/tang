{
  "version": 3,
  "sources": ["../tinymce/plugins/table/plugin.js", "../tinymce/plugins/table/index.js", "dep:tinymce_plugins_table"],
  "sourcesContent": ["/**\n * TinyMCE version 6.1.0 (2022-06-29)\n */\n\n(function () {\n    'use strict';\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType$1 = type => value => typeOf(value) === type;\n    const isSimpleType = type => value => typeof value === type;\n    const eq$1 = t => a => t === a;\n    const isString = isType$1('string');\n    const isArray = isType$1('array');\n    const isBoolean = isSimpleType('boolean');\n    const isUndefined = eq$1(undefined);\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n    const isFunction = isSimpleType('function');\n    const isNumber = isSimpleType('number');\n\n    const noop = () => {\n    };\n    const compose1 = (fbc, fab) => a => fbc(fab(a));\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const identity = x => {\n      return x;\n    };\n    const tripleEquals = (a, b) => {\n      return a === b;\n    };\n    function curry(fn, ...initialArgs) {\n      return (...restArgs) => {\n        const all = initialArgs.concat(restArgs);\n        return fn.apply(null, all);\n      };\n    }\n    const never = constant(false);\n    const always = constant(true);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const keys = Object.keys;\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each$1 = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n    const objAcc = r => (x, i) => {\n      r[i] = x;\n    };\n    const internalFilter = (obj, pred, onTrue, onFalse) => {\n      const r = {};\n      each$1(obj, (x, i) => {\n        (pred(x, i) ? onTrue : onFalse)(x, i);\n      });\n      return r;\n    };\n    const filter$1 = (obj, pred) => {\n      const t = {};\n      internalFilter(obj, pred, objAcc(t), noop);\n      return t;\n    };\n    const mapToArray = (obj, f) => {\n      const r = [];\n      each$1(obj, (value, name) => {\n        r.push(f(value, name));\n      });\n      return r;\n    };\n    const values = obj => {\n      return mapToArray(obj, identity);\n    };\n    const size = obj => {\n      return keys(obj).length;\n    };\n    const get$4 = (obj, key) => {\n      return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n    const hasNonNullableKey = (obj, key) => has(obj, key) && obj[key] !== undefined && obj[key] !== null;\n\n    const nativeIndexOf = Array.prototype.indexOf;\n    const nativePush = Array.prototype.push;\n    const rawIndexOf = (ts, t) => nativeIndexOf.call(ts, t);\n    const contains = (xs, x) => rawIndexOf(xs, x) > -1;\n    const exists = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    const range = (num, f) => {\n      const r = [];\n      for (let i = 0; i < num; i++) {\n        r.push(f(i));\n      }\n      return r;\n    };\n    const map = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const eachr = (xs, f) => {\n      for (let i = xs.length - 1; i >= 0; i--) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const partition = (xs, pred) => {\n      const pass = [];\n      const fail = [];\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        const arr = pred(x, i) ? pass : fail;\n        arr.push(x);\n      }\n      return {\n        pass,\n        fail\n      };\n    };\n    const filter = (xs, pred) => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          r.push(x);\n        }\n      }\n      return r;\n    };\n    const foldr = (xs, f, acc) => {\n      eachr(xs, (x, i) => {\n        acc = f(acc, x, i);\n      });\n      return acc;\n    };\n    const foldl = (xs, f, acc) => {\n      each(xs, (x, i) => {\n        acc = f(acc, x, i);\n      });\n      return acc;\n    };\n    const findUntil = (xs, pred, until) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return Optional.some(x);\n        } else if (until(x, i)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    const find = (xs, pred) => {\n      return findUntil(xs, pred, never);\n    };\n    const flatten$1 = xs => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        if (!isArray(xs[i])) {\n          throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n        }\n        nativePush.apply(r, xs[i]);\n      }\n      return r;\n    };\n    const bind = (xs, f) => flatten$1(map(xs, f));\n    const forall = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        const x = xs[i];\n        if (pred(x, i) !== true) {\n          return false;\n        }\n      }\n      return true;\n    };\n    const mapToObject = (xs, f) => {\n      const r = {};\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        r[String(x)] = f(x, i);\n      }\n      return r;\n    };\n    const get$3 = (xs, i) => i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n    const head = xs => get$3(xs, 0);\n    const last = xs => get$3(xs, xs.length - 1);\n    const findMap = (arr, f) => {\n      for (let i = 0; i < arr.length; i++) {\n        const r = f(arr[i], i);\n        if (r.isSome()) {\n          return r;\n        }\n      }\n      return Optional.none();\n    };\n\n    const fromHtml = (html, scope) => {\n      const doc = scope || document;\n      const div = doc.createElement('div');\n      div.innerHTML = html;\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        const message = 'HTML does not have a single root node';\n        console.error(message, html);\n        throw new Error(message);\n      }\n      return fromDom$1(div.childNodes[0]);\n    };\n    const fromTag = (tag, scope) => {\n      const doc = scope || document;\n      const node = doc.createElement(tag);\n      return fromDom$1(node);\n    };\n    const fromText = (text, scope) => {\n      const doc = scope || document;\n      const node = doc.createTextNode(text);\n      return fromDom$1(node);\n    };\n    const fromDom$1 = node => {\n      if (node === null || node === undefined) {\n        throw new Error('Node cannot be null or undefined');\n      }\n      return { dom: node };\n    };\n    const fromPoint = (docElm, x, y) => Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom$1);\n    const SugarElement = {\n      fromHtml,\n      fromTag,\n      fromText,\n      fromDom: fromDom$1,\n      fromPoint\n    };\n\n    typeof window !== 'undefined' ? window : Function('return this;')();\n\n    const COMMENT = 8;\n    const DOCUMENT = 9;\n    const DOCUMENT_FRAGMENT = 11;\n    const ELEMENT = 1;\n    const TEXT = 3;\n\n    const name = element => {\n      const r = element.dom.nodeName;\n      return r.toLowerCase();\n    };\n    const type = element => element.dom.nodeType;\n    const isType = t => element => type(element) === t;\n    const isComment = element => type(element) === COMMENT || name(element) === '#comment';\n    const isElement = isType(ELEMENT);\n    const isText = isType(TEXT);\n    const isDocument = isType(DOCUMENT);\n    const isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n    const isTag = tag => e => isElement(e) && name(e) === tag;\n\n    const is$2 = (element, selector) => {\n      const dom = element.dom;\n      if (dom.nodeType !== ELEMENT) {\n        return false;\n      } else {\n        const elem = dom;\n        if (elem.matches !== undefined) {\n          return elem.matches(selector);\n        } else if (elem.msMatchesSelector !== undefined) {\n          return elem.msMatchesSelector(selector);\n        } else if (elem.webkitMatchesSelector !== undefined) {\n          return elem.webkitMatchesSelector(selector);\n        } else if (elem.mozMatchesSelector !== undefined) {\n          return elem.mozMatchesSelector(selector);\n        } else {\n          throw new Error('Browser lacks native selectors');\n        }\n      }\n    };\n    const bypassSelector = dom => dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n    const all$1 = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? [] : map(base.querySelectorAll(selector), SugarElement.fromDom);\n    };\n    const one = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? Optional.none() : Optional.from(base.querySelector(selector)).map(SugarElement.fromDom);\n    };\n\n    const eq = (e1, e2) => e1.dom === e2.dom;\n    const is$1 = is$2;\n\n    const owner = element => SugarElement.fromDom(element.dom.ownerDocument);\n    const documentOrOwner = dos => isDocument(dos) ? dos : owner(dos);\n    const parent = element => Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n    const parents = (element, isRoot) => {\n      const stop = isFunction(isRoot) ? isRoot : never;\n      let dom = element.dom;\n      const ret = [];\n      while (dom.parentNode !== null && dom.parentNode !== undefined) {\n        const rawParent = dom.parentNode;\n        const p = SugarElement.fromDom(rawParent);\n        ret.push(p);\n        if (stop(p) === true) {\n          break;\n        } else {\n          dom = rawParent;\n        }\n      }\n      return ret;\n    };\n    const prevSibling = element => Optional.from(element.dom.previousSibling).map(SugarElement.fromDom);\n    const nextSibling = element => Optional.from(element.dom.nextSibling).map(SugarElement.fromDom);\n    const children$3 = element => map(element.dom.childNodes, SugarElement.fromDom);\n    const child$3 = (element, index) => {\n      const cs = element.dom.childNodes;\n      return Optional.from(cs[index]).map(SugarElement.fromDom);\n    };\n    const firstChild = element => child$3(element, 0);\n\n    const isShadowRoot = dos => isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n    const supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n    const getRootNode = supported ? e => SugarElement.fromDom(e.dom.getRootNode()) : documentOrOwner;\n    const getShadowRoot = e => {\n      const r = getRootNode(e);\n      return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n    };\n    const getShadowHost = e => SugarElement.fromDom(e.dom.host);\n\n    const inBody = element => {\n      const dom = isText(element) ? element.dom.parentNode : element.dom;\n      if (dom === undefined || dom === null || dom.ownerDocument === null) {\n        return false;\n      }\n      const doc = dom.ownerDocument;\n      return getShadowRoot(SugarElement.fromDom(dom)).fold(() => doc.body.contains(dom), compose1(inBody, getShadowHost));\n    };\n\n    const children$2 = (scope, predicate) => filter(children$3(scope), predicate);\n    const descendants$1 = (scope, predicate) => {\n      let result = [];\n      each(children$3(scope), x => {\n        if (predicate(x)) {\n          result = result.concat([x]);\n        }\n        result = result.concat(descendants$1(x, predicate));\n      });\n      return result;\n    };\n\n    const children$1 = (scope, selector) => children$2(scope, e => is$2(e, selector));\n    const descendants = (scope, selector) => all$1(selector, scope);\n\n    var ClosestOrAncestor = (is, ancestor, scope, a, isRoot) => {\n      if (is(scope, a)) {\n        return Optional.some(scope);\n      } else if (isFunction(isRoot) && isRoot(scope)) {\n        return Optional.none();\n      } else {\n        return ancestor(scope, a, isRoot);\n      }\n    };\n\n    const ancestor$1 = (scope, predicate, isRoot) => {\n      let element = scope.dom;\n      const stop = isFunction(isRoot) ? isRoot : never;\n      while (element.parentNode) {\n        element = element.parentNode;\n        const el = SugarElement.fromDom(element);\n        if (predicate(el)) {\n          return Optional.some(el);\n        } else if (stop(el)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    const child$2 = (scope, predicate) => {\n      const pred = node => predicate(SugarElement.fromDom(node));\n      const result = find(scope.dom.childNodes, pred);\n      return result.map(SugarElement.fromDom);\n    };\n\n    const ancestor = (scope, selector, isRoot) => ancestor$1(scope, e => is$2(e, selector), isRoot);\n    const child$1 = (scope, selector) => child$2(scope, e => is$2(e, selector));\n    const descendant = (scope, selector) => one(selector, scope);\n    const closest = (scope, selector, isRoot) => {\n      const is = (element, selector) => is$2(element, selector);\n      return ClosestOrAncestor(is, ancestor, scope, selector, isRoot);\n    };\n\n    const rawSet = (dom, key, value) => {\n      if (isString(value) || isBoolean(value) || isNumber(value)) {\n        dom.setAttribute(key, value + '');\n      } else {\n        console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n        throw new Error('Attribute value was not simple');\n      }\n    };\n    const set$2 = (element, key, value) => {\n      rawSet(element.dom, key, value);\n    };\n    const setAll = (element, attrs) => {\n      const dom = element.dom;\n      each$1(attrs, (v, k) => {\n        rawSet(dom, k, v);\n      });\n    };\n    const get$2 = (element, key) => {\n      const v = element.dom.getAttribute(key);\n      return v === null ? undefined : v;\n    };\n    const getOpt = (element, key) => Optional.from(get$2(element, key));\n    const remove$2 = (element, key) => {\n      element.dom.removeAttribute(key);\n    };\n    const clone = element => foldl(element.dom.attributes, (acc, attr) => {\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n\n    const is = (lhs, rhs, comparator = tripleEquals) => lhs.exists(left => comparator(left, rhs));\n    const cat = arr => {\n      const r = [];\n      const push = x => {\n        r.push(x);\n      };\n      for (let i = 0; i < arr.length; i++) {\n        arr[i].each(push);\n      }\n      return r;\n    };\n    const lift2 = (oa, ob, f) => oa.isSome() && ob.isSome() ? Optional.some(f(oa.getOrDie(), ob.getOrDie())) : Optional.none();\n    const flatten = oot => oot.bind(identity);\n    const someIf = (b, a) => b ? Optional.some(a) : Optional.none();\n\n    const removeFromStart = (str, numChars) => {\n      return str.substring(numChars);\n    };\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const removeLeading = (str, prefix) => {\n      return startsWith(str, prefix) ? removeFromStart(str, prefix.length) : str;\n    };\n    const startsWith = (str, prefix) => {\n      return checkRange(str, prefix, 0);\n    };\n    const blank = r => s => s.replace(r, '');\n    const trim = blank(/^\\s+|\\s+$/g);\n    const isNotEmpty = s => s.length > 0;\n    const isEmpty = s => !isNotEmpty(s);\n    const toFloat = value => {\n      const num = parseFloat(value);\n      return isNaN(num) ? Optional.none() : Optional.some(num);\n    };\n\n    const isSupported = dom => dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n\n    const internalSet = (dom, property, value) => {\n      if (!isString(value)) {\n        console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n        throw new Error('CSS value must be a string: ' + value);\n      }\n      if (isSupported(dom)) {\n        dom.style.setProperty(property, value);\n      }\n    };\n    const internalRemove = (dom, property) => {\n      if (isSupported(dom)) {\n        dom.style.removeProperty(property);\n      }\n    };\n    const set$1 = (element, property, value) => {\n      const dom = element.dom;\n      internalSet(dom, property, value);\n    };\n    const get$1 = (element, property) => {\n      const dom = element.dom;\n      const styles = window.getComputedStyle(dom);\n      const r = styles.getPropertyValue(property);\n      return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n    };\n    const getUnsafeProperty = (dom, property) => isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n    const getRaw = (element, property) => {\n      const dom = element.dom;\n      const raw = getUnsafeProperty(dom, property);\n      return Optional.from(raw).filter(r => r.length > 0);\n    };\n    const remove$1 = (element, property) => {\n      const dom = element.dom;\n      internalRemove(dom, property);\n      if (is(getOpt(element, 'style').map(trim), '')) {\n        remove$2(element, 'style');\n      }\n    };\n\n    const getAttrValue = (cell, name, fallback = 0) => getOpt(cell, name).map(value => parseInt(value, 10)).getOr(fallback);\n\n    const firstLayer = (scope, selector) => {\n      return filterFirstLayer(scope, selector, always);\n    };\n    const filterFirstLayer = (scope, selector, predicate) => {\n      return bind(children$3(scope), x => {\n        if (is$2(x, selector)) {\n          return predicate(x) ? [x] : [];\n        } else {\n          return filterFirstLayer(x, selector, predicate);\n        }\n      });\n    };\n\n    const validSectionList = [\n      'tfoot',\n      'thead',\n      'tbody',\n      'colgroup'\n    ];\n    const isValidSection = parentName => contains(validSectionList, parentName);\n    const grid = (rows, columns) => ({\n      rows,\n      columns\n    });\n    const detail = (element, rowspan, colspan) => ({\n      element,\n      rowspan,\n      colspan\n    });\n    const extended = (element, rowspan, colspan, row, column, isLocked) => ({\n      element,\n      rowspan,\n      colspan,\n      row,\n      column,\n      isLocked\n    });\n    const rowdetail = (element, cells, section) => ({\n      element,\n      cells,\n      section\n    });\n    const bounds = (startRow, startCol, finishRow, finishCol) => ({\n      startRow,\n      startCol,\n      finishRow,\n      finishCol\n    });\n    const columnext = (element, colspan, column) => ({\n      element,\n      colspan,\n      column\n    });\n    const colgroup = (element, columns) => ({\n      element,\n      columns\n    });\n\n    const lookup = (tags, element, isRoot = never) => {\n      if (isRoot(element)) {\n        return Optional.none();\n      }\n      if (contains(tags, name(element))) {\n        return Optional.some(element);\n      }\n      const isRootOrUpperTable = elm => is$2(elm, 'table') || isRoot(elm);\n      return ancestor(element, tags.join(','), isRootOrUpperTable);\n    };\n    const cell = (element, isRoot) => lookup([\n      'td',\n      'th'\n    ], element, isRoot);\n    const cells = ancestor => firstLayer(ancestor, 'th,td');\n    const columns = ancestor => {\n      if (is$2(ancestor, 'colgroup')) {\n        return children$1(ancestor, 'col');\n      } else {\n        return bind(columnGroups(ancestor), columnGroup => children$1(columnGroup, 'col'));\n      }\n    };\n    const table = (element, isRoot) => closest(element, 'table', isRoot);\n    const rows = ancestor => firstLayer(ancestor, 'tr');\n    const columnGroups = ancestor => table(ancestor).fold(constant([]), table => children$1(table, 'colgroup'));\n\n    const fromRowsOrColGroups = (elems, getSection) => map(elems, row => {\n      if (name(row) === 'colgroup') {\n        const cells = map(columns(row), column => {\n          const colspan = getAttrValue(column, 'span', 1);\n          return detail(column, 1, colspan);\n        });\n        return rowdetail(row, cells, 'colgroup');\n      } else {\n        const cells$1 = map(cells(row), cell => {\n          const rowspan = getAttrValue(cell, 'rowspan', 1);\n          const colspan = getAttrValue(cell, 'colspan', 1);\n          return detail(cell, rowspan, colspan);\n        });\n        return rowdetail(row, cells$1, getSection(row));\n      }\n    });\n    const getParentSection = group => parent(group).map(parent => {\n      const parentName = name(parent);\n      return isValidSection(parentName) ? parentName : 'tbody';\n    }).getOr('tbody');\n    const fromTable$1 = table => {\n      const rows$1 = rows(table);\n      const columnGroups$1 = columnGroups(table);\n      const elems = [\n        ...columnGroups$1,\n        ...rows$1\n      ];\n      return fromRowsOrColGroups(elems, getParentSection);\n    };\n\n    const LOCKED_COL_ATTR = 'data-snooker-locked-cols';\n    const getLockedColumnsFromTable = table => getOpt(table, LOCKED_COL_ATTR).bind(lockedColStr => Optional.from(lockedColStr.match(/\\d+/g))).map(lockedCols => mapToObject(lockedCols, always));\n\n    const key = (row, column) => {\n      return row + ',' + column;\n    };\n    const getAt = (warehouse, row, column) => Optional.from(warehouse.access[key(row, column)]);\n    const findItem = (warehouse, item, comparator) => {\n      const filtered = filterItems(warehouse, detail => {\n        return comparator(item, detail.element);\n      });\n      return filtered.length > 0 ? Optional.some(filtered[0]) : Optional.none();\n    };\n    const filterItems = (warehouse, predicate) => {\n      const all = bind(warehouse.all, r => {\n        return r.cells;\n      });\n      return filter(all, predicate);\n    };\n    const generateColumns = rowData => {\n      const columnsGroup = {};\n      let index = 0;\n      each(rowData.cells, column => {\n        const colspan = column.colspan;\n        range(colspan, columnIndex => {\n          const colIndex = index + columnIndex;\n          columnsGroup[colIndex] = columnext(column.element, colspan, colIndex);\n        });\n        index += colspan;\n      });\n      return columnsGroup;\n    };\n    const generate$1 = list => {\n      const access = {};\n      const cells = [];\n      const tableOpt = head(list).map(rowData => rowData.element).bind(table);\n      const lockedColumns = tableOpt.bind(getLockedColumnsFromTable).getOr({});\n      let maxRows = 0;\n      let maxColumns = 0;\n      let rowCount = 0;\n      const {\n        pass: colgroupRows,\n        fail: rows\n      } = partition(list, rowData => rowData.section === 'colgroup');\n      each(rows, rowData => {\n        const currentRow = [];\n        each(rowData.cells, rowCell => {\n          let start = 0;\n          while (access[key(rowCount, start)] !== undefined) {\n            start++;\n          }\n          const isLocked = hasNonNullableKey(lockedColumns, start.toString());\n          const current = extended(rowCell.element, rowCell.rowspan, rowCell.colspan, rowCount, start, isLocked);\n          for (let occupiedColumnPosition = 0; occupiedColumnPosition < rowCell.colspan; occupiedColumnPosition++) {\n            for (let occupiedRowPosition = 0; occupiedRowPosition < rowCell.rowspan; occupiedRowPosition++) {\n              const rowPosition = rowCount + occupiedRowPosition;\n              const columnPosition = start + occupiedColumnPosition;\n              const newpos = key(rowPosition, columnPosition);\n              access[newpos] = current;\n              maxColumns = Math.max(maxColumns, columnPosition + 1);\n            }\n          }\n          currentRow.push(current);\n        });\n        maxRows++;\n        cells.push(rowdetail(rowData.element, currentRow, rowData.section));\n        rowCount++;\n      });\n      const {columns, colgroups} = last(colgroupRows).map(rowData => {\n        const columns = generateColumns(rowData);\n        const colgroup$1 = colgroup(rowData.element, values(columns));\n        return {\n          colgroups: [colgroup$1],\n          columns\n        };\n      }).getOrThunk(() => ({\n        colgroups: [],\n        columns: {}\n      }));\n      const grid$1 = grid(maxRows, maxColumns);\n      return {\n        grid: grid$1,\n        access,\n        all: cells,\n        columns,\n        colgroups\n      };\n    };\n    const fromTable = table => {\n      const list = fromTable$1(table);\n      return generate$1(list);\n    };\n    const justCells = warehouse => bind(warehouse.all, w => w.cells);\n    const justColumns = warehouse => values(warehouse.columns);\n    const hasColumns = warehouse => keys(warehouse.columns).length > 0;\n    const getColumnAt = (warehouse, columnIndex) => Optional.from(warehouse.columns[columnIndex]);\n    const Warehouse = {\n      fromTable,\n      generate: generate$1,\n      getAt,\n      findItem,\n      filterItems,\n      justCells,\n      justColumns,\n      hasColumns,\n      getColumnAt\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const getTDTHOverallStyle = (dom, elm, name) => {\n      const cells = dom.select('td,th', elm);\n      let firstChildStyle;\n      const checkChildren = (firstChildStyle, elms) => {\n        for (let i = 0; i < elms.length; i++) {\n          const currentStyle = dom.getStyle(elms[i], name);\n          if (typeof firstChildStyle === 'undefined') {\n            firstChildStyle = currentStyle;\n          }\n          if (firstChildStyle !== currentStyle) {\n            return '';\n          }\n        }\n        return firstChildStyle;\n      };\n      return checkChildren(firstChildStyle, cells);\n    };\n    const setAlign = (editor, elm, name) => {\n      global$2.each('left center right'.split(' '), align => {\n        if (align !== name) {\n          editor.formatter.remove('align' + align, {}, elm);\n        }\n      });\n      if (name) {\n        editor.formatter.apply('align' + name, {}, elm);\n      }\n    };\n    const setVAlign = (editor, elm, name) => {\n      global$2.each('top middle bottom'.split(' '), align => {\n        if (align !== name) {\n          editor.formatter.remove('valign' + align, {}, elm);\n        }\n      });\n      if (name) {\n        editor.formatter.apply('valign' + name, {}, elm);\n      }\n    };\n\n    const fireTableModified = (editor, table, data) => {\n      editor.dispatch('TableModified', {\n        ...data,\n        table\n      });\n    };\n\n    const toNumber = (px, fallback) => toFloat(px).getOr(fallback);\n    const getProp = (element, name, fallback) => toNumber(get$1(element, name), fallback);\n    const calcContentBoxSize = (element, size, upper, lower) => {\n      const paddingUpper = getProp(element, `padding-${ upper }`, 0);\n      const paddingLower = getProp(element, `padding-${ lower }`, 0);\n      const borderUpper = getProp(element, `border-${ upper }-width`, 0);\n      const borderLower = getProp(element, `border-${ lower }-width`, 0);\n      return size - paddingUpper - paddingLower - borderUpper - borderLower;\n    };\n    const getCalculatedWidth = (element, boxSizing) => {\n      const dom = element.dom;\n      const width = dom.getBoundingClientRect().width || dom.offsetWidth;\n      return boxSizing === 'border-box' ? width : calcContentBoxSize(element, width, 'left', 'right');\n    };\n    const getInnerWidth = element => getCalculatedWidth(element, 'content-box');\n\n    const getInner = getInnerWidth;\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const defaultTableToolbar = 'tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol';\n    const defaultCellBorderWidths = range(5, i => {\n      const size = `${ i + 1 }px`;\n      return {\n        title: size,\n        value: size\n      };\n    });\n    const defaultCellBorderStyles = map([\n      'Solid',\n      'Dotted',\n      'Dashed',\n      'Double',\n      'Groove',\n      'Ridge',\n      'Inset',\n      'Outset',\n      'None',\n      'Hidden'\n    ], type => {\n      return {\n        title: type,\n        value: type.toLowerCase()\n      };\n    });\n    const defaultWidth = '100%';\n    const getPixelForcedWidth = editor => {\n      var _a;\n      const dom = editor.dom;\n      const parentBlock = (_a = dom.getParent(editor.selection.getStart(), dom.isBlock)) !== null && _a !== void 0 ? _a : editor.getBody();\n      return getInner(SugarElement.fromDom(parentBlock)) + 'px';\n    };\n    const determineDefaultStyles = (editor, defaultStyles) => {\n      if (isResponsiveForced(editor) || !shouldStyleWithCss(editor)) {\n        return defaultStyles;\n      } else if (isPixelsForced(editor)) {\n        return {\n          ...defaultStyles,\n          width: getPixelForcedWidth(editor)\n        };\n      } else {\n        return {\n          ...defaultStyles,\n          width: defaultWidth\n        };\n      }\n    };\n    const determineDefaultAttributes = (editor, defaultAttributes) => {\n      if (isResponsiveForced(editor) || shouldStyleWithCss(editor)) {\n        return defaultAttributes;\n      } else if (isPixelsForced(editor)) {\n        return {\n          ...defaultAttributes,\n          width: getPixelForcedWidth(editor)\n        };\n      } else {\n        return {\n          ...defaultAttributes,\n          width: defaultWidth\n        };\n      }\n    };\n    const option = name => editor => editor.options.get(name);\n    const register = editor => {\n      const registerOption = editor.options.register;\n      registerOption('table_border_widths', {\n        processor: 'object[]',\n        default: defaultCellBorderWidths\n      });\n      registerOption('table_border_styles', {\n        processor: 'object[]',\n        default: defaultCellBorderStyles\n      });\n      registerOption('table_cell_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_row_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_appearance_options', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_grid', {\n        processor: 'boolean',\n        default: !global$1.deviceType.isTouch()\n      });\n      registerOption('table_cell_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_row_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_toolbar', {\n        processor: 'string',\n        default: defaultTableToolbar\n      });\n      registerOption('table_background_color_map', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_border_color_map', {\n        processor: 'object[]',\n        default: []\n      });\n    };\n    const getTableSizingMode = option('table_sizing_mode');\n    const getTableBorderWidths = option('table_border_widths');\n    const getTableBorderStyles = option('table_border_styles');\n    const hasAdvancedCellTab = option('table_cell_advtab');\n    const hasAdvancedRowTab = option('table_row_advtab');\n    const hasAdvancedTableTab = option('table_advtab');\n    const hasAppearanceOptions = option('table_appearance_options');\n    const hasTableGrid = option('table_grid');\n    const shouldStyleWithCss = option('table_style_by_css');\n    const getCellClassList = option('table_cell_class_list');\n    const getRowClassList = option('table_row_class_list');\n    const getTableClassList = option('table_class_list');\n    const getToolbar = option('table_toolbar');\n    const getTableBackgroundColorMap = option('table_background_color_map');\n    const getTableBorderColorMap = option('table_border_color_map');\n    const isPixelsForced = editor => getTableSizingMode(editor) === 'fixed';\n    const isResponsiveForced = editor => getTableSizingMode(editor) === 'responsive';\n    const getDefaultStyles = editor => {\n      const options = editor.options;\n      const defaultStyles = options.get('table_default_styles');\n      return options.isSet('table_default_styles') ? defaultStyles : determineDefaultStyles(editor, defaultStyles);\n    };\n    const getDefaultAttributes = editor => {\n      const options = editor.options;\n      const defaultAttributes = options.get('table_default_attributes');\n      return options.isSet('table_default_attributes') ? defaultAttributes : determineDefaultAttributes(editor, defaultAttributes);\n    };\n\n    const getNodeName = elm => elm.nodeName.toLowerCase();\n    const getBody = editor => SugarElement.fromDom(editor.getBody());\n    const getIsRoot = editor => element => eq(element, getBody(editor));\n    const removePxSuffix = size => size ? size.replace(/px$/, '') : '';\n    const addPxSuffix = size => /^\\d+(\\.\\d+)?$/.test(size) ? size + 'px' : size;\n    const getSelectionStart = editor => SugarElement.fromDom(editor.selection.getStart());\n    const getSelectionEnd = editor => SugarElement.fromDom(editor.selection.getEnd());\n\n    const isWithin = (bounds, detail) => {\n      return detail.column >= bounds.startCol && detail.column + detail.colspan - 1 <= bounds.finishCol && detail.row >= bounds.startRow && detail.row + detail.rowspan - 1 <= bounds.finishRow;\n    };\n    const isRectangular = (warehouse, bounds) => {\n      let isRect = true;\n      const detailIsWithin = curry(isWithin, bounds);\n      for (let i = bounds.startRow; i <= bounds.finishRow; i++) {\n        for (let j = bounds.startCol; j <= bounds.finishCol; j++) {\n          isRect = isRect && Warehouse.getAt(warehouse, i, j).exists(detailIsWithin);\n        }\n      }\n      return isRect ? Optional.some(bounds) : Optional.none();\n    };\n\n    const getBounds = (detailA, detailB) => {\n      return bounds(Math.min(detailA.row, detailB.row), Math.min(detailA.column, detailB.column), Math.max(detailA.row + detailA.rowspan - 1, detailB.row + detailB.rowspan - 1), Math.max(detailA.column + detailA.colspan - 1, detailB.column + detailB.colspan - 1));\n    };\n    const getAnyBox = (warehouse, startCell, finishCell) => {\n      const startCoords = Warehouse.findItem(warehouse, startCell, eq);\n      const finishCoords = Warehouse.findItem(warehouse, finishCell, eq);\n      return startCoords.bind(sc => {\n        return finishCoords.map(fc => {\n          return getBounds(sc, fc);\n        });\n      });\n    };\n    const getBox$1 = (warehouse, startCell, finishCell) => {\n      return getAnyBox(warehouse, startCell, finishCell).bind(bounds => {\n        return isRectangular(warehouse, bounds);\n      });\n    };\n\n    const getBox = (table, first, last) => {\n      const warehouse = getWarehouse(table);\n      return getBox$1(warehouse, first, last);\n    };\n    const getWarehouse = Warehouse.fromTable;\n\n    const before = (marker, element) => {\n      const parent$1 = parent(marker);\n      parent$1.each(v => {\n        v.dom.insertBefore(element.dom, marker.dom);\n      });\n    };\n    const after$1 = (marker, element) => {\n      const sibling = nextSibling(marker);\n      sibling.fold(() => {\n        const parent$1 = parent(marker);\n        parent$1.each(v => {\n          append$1(v, element);\n        });\n      }, v => {\n        before(v, element);\n      });\n    };\n    const prepend = (parent, element) => {\n      const firstChild$1 = firstChild(parent);\n      firstChild$1.fold(() => {\n        append$1(parent, element);\n      }, v => {\n        parent.dom.insertBefore(element.dom, v.dom);\n      });\n    };\n    const append$1 = (parent, element) => {\n      parent.dom.appendChild(element.dom);\n    };\n    const wrap = (element, wrapper) => {\n      before(element, wrapper);\n      append$1(wrapper, element);\n    };\n\n    const after = (marker, elements) => {\n      each(elements, (x, i) => {\n        const e = i === 0 ? marker : elements[i - 1];\n        after$1(e, x);\n      });\n    };\n    const append = (parent, elements) => {\n      each(elements, x => {\n        append$1(parent, x);\n      });\n    };\n\n    const remove = element => {\n      const dom = element.dom;\n      if (dom.parentNode !== null) {\n        dom.parentNode.removeChild(dom);\n      }\n    };\n    const unwrap = wrapper => {\n      const children = children$3(wrapper);\n      if (children.length > 0) {\n        after(wrapper, children);\n      }\n      remove(wrapper);\n    };\n\n    const NodeValue = (is, name) => {\n      const get = element => {\n        if (!is(element)) {\n          throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n        }\n        return getOption(element).getOr('');\n      };\n      const getOption = element => is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n      const set = (element, value) => {\n        if (!is(element)) {\n          throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n        }\n        element.dom.nodeValue = value;\n      };\n      return {\n        get,\n        getOption,\n        set\n      };\n    };\n\n    const api = NodeValue(isText, 'text');\n    const get = element => api.get(element);\n    const set = (element, value) => api.set(element, value);\n\n    var TagBoundaries = [\n      'body',\n      'p',\n      'div',\n      'article',\n      'aside',\n      'figcaption',\n      'figure',\n      'footer',\n      'header',\n      'nav',\n      'section',\n      'ol',\n      'ul',\n      'li',\n      'table',\n      'thead',\n      'tbody',\n      'tfoot',\n      'caption',\n      'tr',\n      'td',\n      'th',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'blockquote',\n      'pre',\n      'address'\n    ];\n\n    var DomUniverse = () => {\n      const clone$1 = element => {\n        return SugarElement.fromDom(element.dom.cloneNode(false));\n      };\n      const document = element => documentOrOwner(element).dom;\n      const isBoundary = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        if (name(element) === 'body') {\n          return true;\n        }\n        return contains(TagBoundaries, name(element));\n      };\n      const isEmptyTag = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        return contains([\n          'br',\n          'img',\n          'hr',\n          'input'\n        ], name(element));\n      };\n      const isNonEditable = element => isElement(element) && get$2(element, 'contenteditable') === 'false';\n      const comparePosition = (element, other) => {\n        return element.dom.compareDocumentPosition(other.dom);\n      };\n      const copyAttributesTo = (source, destination) => {\n        const as = clone(source);\n        setAll(destination, as);\n      };\n      const isSpecial = element => {\n        const tag = name(element);\n        return contains([\n          'script',\n          'noscript',\n          'iframe',\n          'noframes',\n          'noembed',\n          'title',\n          'style',\n          'textarea',\n          'xmp'\n        ], tag);\n      };\n      const getLanguage = element => isElement(element) ? getOpt(element, 'lang') : Optional.none();\n      return {\n        up: constant({\n          selector: ancestor,\n          closest: closest,\n          predicate: ancestor$1,\n          all: parents\n        }),\n        down: constant({\n          selector: descendants,\n          predicate: descendants$1\n        }),\n        styles: constant({\n          get: get$1,\n          getRaw: getRaw,\n          set: set$1,\n          remove: remove$1\n        }),\n        attrs: constant({\n          get: get$2,\n          set: set$2,\n          remove: remove$2,\n          copyTo: copyAttributesTo\n        }),\n        insert: constant({\n          before: before,\n          after: after$1,\n          afterAll: after,\n          append: append$1,\n          appendAll: append,\n          prepend: prepend,\n          wrap: wrap\n        }),\n        remove: constant({\n          unwrap: unwrap,\n          remove: remove\n        }),\n        create: constant({\n          nu: SugarElement.fromTag,\n          clone: clone$1,\n          text: SugarElement.fromText\n        }),\n        query: constant({\n          comparePosition,\n          prevSibling: prevSibling,\n          nextSibling: nextSibling\n        }),\n        property: constant({\n          children: children$3,\n          name: name,\n          parent: parent,\n          document,\n          isText: isText,\n          isComment: isComment,\n          isElement: isElement,\n          isSpecial,\n          getLanguage,\n          getText: get,\n          setText: set,\n          isBoundary,\n          isEmptyTag,\n          isNonEditable\n        }),\n        eq: eq,\n        is: is$1\n      };\n    };\n\n    const all = (universe, look, elements, f) => {\n      const head = elements[0];\n      const tail = elements.slice(1);\n      return f(universe, look, head, tail);\n    };\n    const oneAll = (universe, look, elements) => {\n      return elements.length > 0 ? all(universe, look, elements, unsafeOne) : Optional.none();\n    };\n    const unsafeOne = (universe, look, head, tail) => {\n      const start = look(universe, head);\n      return foldr(tail, (b, a) => {\n        const current = look(universe, a);\n        return commonElement(universe, b, current);\n      }, start);\n    };\n    const commonElement = (universe, start, end) => {\n      return start.bind(s => {\n        return end.filter(curry(universe.eq, s));\n      });\n    };\n\n    const sharedOne$1 = oneAll;\n\n    const universe = DomUniverse();\n    const sharedOne = (look, elements) => {\n      return sharedOne$1(universe, (_universe, element) => {\n        return look(element);\n      }, elements);\n    };\n\n    const lookupTable = container => {\n      return ancestor(container, 'table');\n    };\n    const retrieve$1 = (container, selector) => {\n      const sels = descendants(container, selector);\n      return sels.length > 0 ? Optional.some(sels) : Optional.none();\n    };\n    const getEdges = (container, firstSelectedSelector, lastSelectedSelector) => {\n      return descendant(container, firstSelectedSelector).bind(first => {\n        return descendant(container, lastSelectedSelector).bind(last => {\n          return sharedOne(lookupTable, [\n            first,\n            last\n          ]).map(table => {\n            return {\n              first,\n              last,\n              table\n            };\n          });\n        });\n      });\n    };\n\n    const retrieve = (container, selector) => {\n      return retrieve$1(container, selector);\n    };\n    const retrieveBox = (container, firstSelectedSelector, lastSelectedSelector) => {\n      return getEdges(container, firstSelectedSelector, lastSelectedSelector).bind(edges => {\n        const isRoot = ancestor => {\n          return eq(container, ancestor);\n        };\n        const sectionSelector = 'thead,tfoot,tbody,table';\n        const firstAncestor = ancestor(edges.first, sectionSelector, isRoot);\n        const lastAncestor = ancestor(edges.last, sectionSelector, isRoot);\n        return firstAncestor.bind(fA => {\n          return lastAncestor.bind(lA => {\n            return eq(fA, lA) ? getBox(edges.table, edges.first, edges.last) : Optional.none();\n          });\n        });\n      });\n    };\n\n    const fromDom = nodes => map(nodes, SugarElement.fromDom);\n\n    const strSelected = 'data-mce-selected';\n    const strSelectedSelector = 'td[' + strSelected + '],th[' + strSelected + ']';\n    const strFirstSelected = 'data-mce-first-selected';\n    const strFirstSelectedSelector = 'td[' + strFirstSelected + '],th[' + strFirstSelected + ']';\n    const strLastSelected = 'data-mce-last-selected';\n    const strLastSelectedSelector = 'td[' + strLastSelected + '],th[' + strLastSelected + ']';\n    const ephemera = {\n      selected: strSelected,\n      selectedSelector: strSelectedSelector,\n      firstSelected: strFirstSelected,\n      firstSelectedSelector: strFirstSelectedSelector,\n      lastSelected: strLastSelected,\n      lastSelectedSelector: strLastSelectedSelector\n    };\n\n    const getSelectionCellFallback = element => table(element).bind(table => retrieve(table, ephemera.firstSelectedSelector)).fold(constant(element), cells => cells[0]);\n    const getSelectionFromSelector = selector => (initCell, isRoot) => {\n      const cellName = name(initCell);\n      const cell = cellName === 'col' || cellName === 'colgroup' ? getSelectionCellFallback(initCell) : initCell;\n      return closest(cell, selector, isRoot);\n    };\n    const getSelectionCellOrCaption = getSelectionFromSelector('th,td,caption');\n    const getSelectionCell = getSelectionFromSelector('th,td');\n    const getCellsFromSelection = editor => fromDom(editor.model.table.getSelectedCells());\n    const getRowsFromSelection = (selected, selector) => {\n      const cellOpt = getSelectionCell(selected);\n      const rowsOpt = cellOpt.bind(cell => table(cell)).map(table => rows(table));\n      return lift2(cellOpt, rowsOpt, (cell, rows) => filter(rows, row => exists(fromDom(row.dom.cells), rowCell => get$2(rowCell, selector) === '1' || eq(rowCell, cell)))).getOr([]);\n    };\n\n    const verticalAlignValues = [\n      {\n        text: 'None',\n        value: ''\n      },\n      {\n        text: 'Top',\n        value: 'top'\n      },\n      {\n        text: 'Middle',\n        value: 'middle'\n      },\n      {\n        text: 'Bottom',\n        value: 'bottom'\n      }\n    ];\n\n    const hexColour = value => ({ value });\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    const longformRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n    const isHexString = hex => shorthandRegex.test(hex) || longformRegex.test(hex);\n    const normalizeHex = hex => removeLeading(hex, '#').toUpperCase();\n    const fromString$1 = hex => isHexString(hex) ? Optional.some({ value: normalizeHex(hex) }) : Optional.none();\n    const toHex = component => {\n      const hex = component.toString(16);\n      return (hex.length === 1 ? '0' + hex : hex).toUpperCase();\n    };\n    const fromRgba = rgbaColour => {\n      const value = toHex(rgbaColour.red) + toHex(rgbaColour.green) + toHex(rgbaColour.blue);\n      return hexColour(value);\n    };\n\n    const rgbRegex = /^\\s*rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)\\s*$/i;\n    const rgbaRegex = /^\\s*rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?(?:\\.\\d+)?)\\s*\\)\\s*$/i;\n    const rgbaColour = (red, green, blue, alpha) => ({\n      red,\n      green,\n      blue,\n      alpha\n    });\n    const fromStringValues = (red, green, blue, alpha) => {\n      const r = parseInt(red, 10);\n      const g = parseInt(green, 10);\n      const b = parseInt(blue, 10);\n      const a = parseFloat(alpha);\n      return rgbaColour(r, g, b, a);\n    };\n    const fromString = rgbaString => {\n      if (rgbaString === 'transparent') {\n        return Optional.some(rgbaColour(0, 0, 0, 0));\n      }\n      const rgbMatch = rgbRegex.exec(rgbaString);\n      if (rgbMatch !== null) {\n        return Optional.some(fromStringValues(rgbMatch[1], rgbMatch[2], rgbMatch[3], '1'));\n      }\n      const rgbaMatch = rgbaRegex.exec(rgbaString);\n      if (rgbaMatch !== null) {\n        return Optional.some(fromStringValues(rgbaMatch[1], rgbaMatch[2], rgbaMatch[3], rgbaMatch[4]));\n      }\n      return Optional.none();\n    };\n\n    const anyToHex = color => fromString$1(color).orThunk(() => fromString(color).map(fromRgba)).getOrThunk(() => {\n      const canvas = document.createElement('canvas');\n      canvas.height = 1;\n      canvas.width = 1;\n      const canvasContext = canvas.getContext('2d');\n      canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n      canvasContext.fillStyle = '#FFFFFF';\n      canvasContext.fillStyle = color;\n      canvasContext.fillRect(0, 0, 1, 1);\n      const rgba = canvasContext.getImageData(0, 0, 1, 1).data;\n      const r = rgba[0];\n      const g = rgba[1];\n      const b = rgba[2];\n      const a = rgba[3];\n      return fromRgba(rgbaColour(r, g, b, a));\n    });\n    const rgbaToHexString = color => fromString(color).map(fromRgba).map(h => '#' + h.value).getOr(color);\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    const singleton = doRevoke => {\n      const subject = Cell(Optional.none());\n      const revoke = () => subject.get().each(doRevoke);\n      const clear = () => {\n        revoke();\n        subject.set(Optional.none());\n      };\n      const isSet = () => subject.get().isSome();\n      const get = () => subject.get();\n      const set = s => {\n        revoke();\n        subject.set(Optional.some(s));\n      };\n      return {\n        clear,\n        isSet,\n        get,\n        set\n      };\n    };\n    const unbindable = () => singleton(s => s.unbind());\n\n    const onSetupToggle = (editor, formatName, formatValue) => {\n      return api => {\n        const boundCallback = unbindable();\n        const isNone = isEmpty(formatValue);\n        const init = () => {\n          const selectedCells = getCellsFromSelection(editor);\n          const checkNode = cell => editor.formatter.match(formatName, { value: formatValue }, cell.dom, isNone);\n          if (isNone) {\n            api.setActive(!exists(selectedCells, checkNode));\n            boundCallback.set(editor.formatter.formatChanged(formatName, match => api.setActive(!match), true));\n          } else {\n            api.setActive(forall(selectedCells, checkNode));\n            boundCallback.set(editor.formatter.formatChanged(formatName, api.setActive, false, { value: formatValue }));\n          }\n        };\n        editor.initialized ? init() : editor.on('init', init);\n        return boundCallback.clear;\n      };\n    };\n    const isListGroup = item => hasNonNullableKey(item, 'menu');\n    const buildListItems = items => map(items, item => {\n      const text = item.text || item.title;\n      if (isListGroup(item)) {\n        return {\n          text,\n          items: buildListItems(item.menu)\n        };\n      } else {\n        return {\n          text,\n          value: item.value\n        };\n      }\n    });\n    const buildMenuItems = (editor, items, format, onAction) => map(items, item => {\n      const text = item.text || item.title;\n      if (isListGroup(item)) {\n        return {\n          type: 'nestedmenuitem',\n          text,\n          getSubmenuItems: () => buildMenuItems(editor, item.menu, format, onAction)\n        };\n      } else {\n        return {\n          text,\n          type: 'togglemenuitem',\n          onAction: () => onAction(item.value),\n          onSetup: onSetupToggle(editor, format, item.value)\n        };\n      }\n    });\n    const applyTableCellStyle = (editor, style) => value => {\n      editor.execCommand('mceTableApplyCellStyle', false, { [style]: value });\n    };\n    const filterNoneItem = list => bind(list, item => {\n      if (isListGroup(item)) {\n        return [{\n            ...item,\n            menu: filterNoneItem(item.menu)\n          }];\n      } else {\n        return isNotEmpty(item.value) ? [item] : [];\n      }\n    });\n    const generateMenuItemsCallback = (editor, items, format, onAction) => callback => callback(buildMenuItems(editor, items, format, onAction));\n    const buildColorMenu = (editor, colorList, style) => {\n      const colorMap = map(colorList, entry => ({\n        text: entry.title,\n        value: '#' + anyToHex(entry.value).value,\n        type: 'choiceitem'\n      }));\n      return [{\n          type: 'fancymenuitem',\n          fancytype: 'colorswatch',\n          initData: {\n            colors: colorMap.length > 0 ? colorMap : undefined,\n            allowCustomColors: false\n          },\n          onAction: data => {\n            const value = data.value === 'remove' ? '' : data.value;\n            editor.execCommand('mceTableApplyCellStyle', false, { [style]: value });\n          }\n        }];\n    };\n    const changeRowHeader = editor => () => {\n      const currentType = editor.queryCommandValue('mceTableRowType');\n      const newType = currentType === 'header' ? 'body' : 'header';\n      editor.execCommand('mceTableRowType', false, { type: newType });\n    };\n    const changeColumnHeader = editor => () => {\n      const currentType = editor.queryCommandValue('mceTableColType');\n      const newType = currentType === 'th' ? 'td' : 'th';\n      editor.execCommand('mceTableColType', false, { type: newType });\n    };\n\n    const getClassList$1 = editor => {\n      const classes = buildListItems(getCellClassList(editor));\n      if (classes.length > 0) {\n        return Optional.some({\n          name: 'class',\n          type: 'listbox',\n          label: 'Class',\n          items: classes\n        });\n      }\n      return Optional.none();\n    };\n    const children = [\n      {\n        name: 'width',\n        type: 'input',\n        label: 'Width'\n      },\n      {\n        name: 'height',\n        type: 'input',\n        label: 'Height'\n      },\n      {\n        name: 'celltype',\n        type: 'listbox',\n        label: 'Cell type',\n        items: [\n          {\n            text: 'Cell',\n            value: 'td'\n          },\n          {\n            text: 'Header cell',\n            value: 'th'\n          }\n        ]\n      },\n      {\n        name: 'scope',\n        type: 'listbox',\n        label: 'Scope',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Row',\n            value: 'row'\n          },\n          {\n            text: 'Column',\n            value: 'col'\n          },\n          {\n            text: 'Row group',\n            value: 'rowgroup'\n          },\n          {\n            text: 'Column group',\n            value: 'colgroup'\n          }\n        ]\n      },\n      {\n        name: 'halign',\n        type: 'listbox',\n        label: 'Horizontal align',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Left',\n            value: 'left'\n          },\n          {\n            text: 'Center',\n            value: 'center'\n          },\n          {\n            text: 'Right',\n            value: 'right'\n          }\n        ]\n      },\n      {\n        name: 'valign',\n        type: 'listbox',\n        label: 'Vertical align',\n        items: verticalAlignValues\n      }\n    ];\n    const getItems$2 = editor => children.concat(getClassList$1(editor).toArray());\n\n    const getAdvancedTab = (editor, dialogName) => {\n      const emptyBorderStyle = [{\n          text: 'Select...',\n          value: ''\n        }];\n      const advTabItems = [\n        {\n          name: 'borderstyle',\n          type: 'listbox',\n          label: 'Border style',\n          items: emptyBorderStyle.concat(buildListItems(getTableBorderStyles(editor)))\n        },\n        {\n          name: 'bordercolor',\n          type: 'colorinput',\n          label: 'Border color'\n        },\n        {\n          name: 'backgroundcolor',\n          type: 'colorinput',\n          label: 'Background color'\n        }\n      ];\n      const borderWidth = {\n        name: 'borderwidth',\n        type: 'input',\n        label: 'Border width'\n      };\n      const items = dialogName === 'cell' ? [borderWidth].concat(advTabItems) : advTabItems;\n      return {\n        title: 'Advanced',\n        name: 'advanced',\n        items\n      };\n    };\n\n    const normal = (editor, element) => {\n      const dom = editor.dom;\n      const setAttrib = (attr, value) => {\n        dom.setAttrib(element, attr, value);\n      };\n      const setStyle = (prop, value) => {\n        dom.setStyle(element, prop, value);\n      };\n      const setFormat = (formatName, value) => {\n        if (value === '') {\n          editor.formatter.remove(formatName, { value: null }, element, true);\n        } else {\n          editor.formatter.apply(formatName, { value }, element);\n        }\n      };\n      return {\n        setAttrib,\n        setStyle,\n        setFormat\n      };\n    };\n    const DomModifier = { normal };\n\n    const isHeaderCell = isTag('th');\n    const getRowHeaderType = (isHeaderRow, isHeaderCells) => {\n      if (isHeaderRow && isHeaderCells) {\n        return 'sectionCells';\n      } else if (isHeaderRow) {\n        return 'section';\n      } else {\n        return 'cells';\n      }\n    };\n    const getRowType$1 = row => {\n      const isHeaderRow = row.section === 'thead';\n      const isHeaderCells = is(findCommonCellType(row.cells), 'th');\n      if (row.section === 'tfoot') {\n        return { type: 'footer' };\n      } else if (isHeaderRow || isHeaderCells) {\n        return {\n          type: 'header',\n          subType: getRowHeaderType(isHeaderRow, isHeaderCells)\n        };\n      } else {\n        return { type: 'body' };\n      }\n    };\n    const findCommonCellType = cells => {\n      const headerCells = filter(cells, cell => isHeaderCell(cell.element));\n      if (headerCells.length === 0) {\n        return Optional.some('td');\n      } else if (headerCells.length === cells.length) {\n        return Optional.some('th');\n      } else {\n        return Optional.none();\n      }\n    };\n    const findCommonRowType = rows => {\n      const rowTypes = map(rows, row => getRowType$1(row).type);\n      const hasHeader = contains(rowTypes, 'header');\n      const hasFooter = contains(rowTypes, 'footer');\n      if (!hasHeader && !hasFooter) {\n        return Optional.some('body');\n      } else {\n        const hasBody = contains(rowTypes, 'body');\n        if (hasHeader && !hasBody && !hasFooter) {\n          return Optional.some('header');\n        } else if (!hasHeader && !hasBody && hasFooter) {\n          return Optional.some('footer');\n        } else {\n          return Optional.none();\n        }\n      }\n    };\n\n    const cached = f => {\n      let called = false;\n      let r;\n      return (...args) => {\n        if (!called) {\n          called = true;\n          r = f.apply(null, args);\n        }\n        return r;\n      };\n    };\n\n    const findInWarehouse = (warehouse, element) => findMap(warehouse.all, r => find(r.cells, e => eq(element, e.element)));\n    const extractCells = (warehouse, target, predicate) => {\n      const details = map(target.selection, cell$1 => {\n        return cell(cell$1).bind(lc => findInWarehouse(warehouse, lc)).filter(predicate);\n      });\n      const cells = cat(details);\n      return someIf(cells.length > 0, cells);\n    };\n    const onMergable = (_warehouse, target) => target.mergable;\n    const onUnmergable = (_warehouse, target) => target.unmergable;\n    const onCells = (warehouse, target) => extractCells(warehouse, target, always);\n    const isUnlockedTableCell = (warehouse, cell) => findInWarehouse(warehouse, cell).exists(detail => !detail.isLocked);\n    const allUnlocked = (warehouse, cells) => forall(cells, cell => isUnlockedTableCell(warehouse, cell));\n    const onUnlockedMergable = (warehouse, target) => onMergable(warehouse, target).filter(mergeable => allUnlocked(warehouse, mergeable.cells));\n    const onUnlockedUnmergable = (warehouse, target) => onUnmergable(warehouse, target).filter(cells => allUnlocked(warehouse, cells));\n\n    const generate = cases => {\n      if (!isArray(cases)) {\n        throw new Error('cases must be an array');\n      }\n      if (cases.length === 0) {\n        throw new Error('there must be at least one case');\n      }\n      const constructors = [];\n      const adt = {};\n      each(cases, (acase, count) => {\n        const keys$1 = keys(acase);\n        if (keys$1.length !== 1) {\n          throw new Error('one and only one name per case');\n        }\n        const key = keys$1[0];\n        const value = acase[key];\n        if (adt[key] !== undefined) {\n          throw new Error('duplicate key detected:' + key);\n        } else if (key === 'cata') {\n          throw new Error('cannot have a case named cata (sorry)');\n        } else if (!isArray(value)) {\n          throw new Error('case arguments must be an array');\n        }\n        constructors.push(key);\n        adt[key] = (...args) => {\n          const argLength = args.length;\n          if (argLength !== value.length) {\n            throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n          }\n          const match = branches => {\n            const branchKeys = keys(branches);\n            if (constructors.length !== branchKeys.length) {\n              throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n            }\n            const allReqd = forall(constructors, reqKey => {\n              return contains(branchKeys, reqKey);\n            });\n            if (!allReqd) {\n              throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n            }\n            return branches[key].apply(null, args);\n          };\n          return {\n            fold: (...foldArgs) => {\n              if (foldArgs.length !== cases.length) {\n                throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n              }\n              const target = foldArgs[count];\n              return target.apply(null, args);\n            },\n            match,\n            log: label => {\n              console.log(label, {\n                constructors,\n                constructor: key,\n                params: args\n              });\n            }\n          };\n        };\n      });\n      return adt;\n    };\n    const Adt = { generate };\n\n    const adt = Adt.generate([\n      { none: [] },\n      { only: ['index'] },\n      {\n        left: [\n          'index',\n          'next'\n        ]\n      },\n      {\n        middle: [\n          'prev',\n          'index',\n          'next'\n        ]\n      },\n      {\n        right: [\n          'prev',\n          'index'\n        ]\n      }\n    ]);\n    ({ ...adt });\n\n    const opGetRowsType = (table, target) => {\n      const house = Warehouse.fromTable(table);\n      const details = onCells(house, target);\n      return details.bind(selectedCells => {\n        const lastSelectedCell = selectedCells[selectedCells.length - 1];\n        const minRowRange = selectedCells[0].row;\n        const maxRowRange = lastSelectedCell.row + lastSelectedCell.rowspan;\n        const selectedRows = house.all.slice(minRowRange, maxRowRange);\n        return findCommonRowType(selectedRows);\n      }).getOr('');\n    };\n    const getRowsType = opGetRowsType;\n\n    const rgbToHex = value => startsWith(value, 'rgb') ? rgbaToHexString(value) : value;\n    const extractAdvancedStyles = elm => {\n      const element = SugarElement.fromDom(elm);\n      return {\n        borderwidth: getRaw(element, 'border-width').getOr(''),\n        borderstyle: getRaw(element, 'border-style').getOr(''),\n        bordercolor: getRaw(element, 'border-color').map(rgbToHex).getOr(''),\n        backgroundcolor: getRaw(element, 'background-color').map(rgbToHex).getOr('')\n      };\n    };\n    const getSharedValues = data => {\n      const baseData = data[0];\n      const comparisonData = data.slice(1);\n      each(comparisonData, items => {\n        each(keys(baseData), key => {\n          each$1(items, (itemValue, itemKey) => {\n            const comparisonValue = baseData[key];\n            if (comparisonValue !== '' && key === itemKey) {\n              if (comparisonValue !== itemValue) {\n                baseData[key] = '';\n              }\n            }\n          });\n        });\n      });\n      return baseData;\n    };\n    const getAlignment = (formats, formatName, editor, elm) => find(formats, name => !isUndefined(editor.formatter.matchNode(elm, formatName + name))).getOr('');\n    const getHAlignment = curry(getAlignment, [\n      'left',\n      'center',\n      'right'\n    ], 'align');\n    const getVAlignment = curry(getAlignment, [\n      'top',\n      'middle',\n      'bottom'\n    ], 'valign');\n    const extractDataFromSettings = (editor, hasAdvTableTab) => {\n      const style = getDefaultStyles(editor);\n      const attrs = getDefaultAttributes(editor);\n      const extractAdvancedStyleData = () => ({\n        borderstyle: get$4(style, 'border-style').getOr(''),\n        bordercolor: rgbToHex(get$4(style, 'border-color').getOr('')),\n        backgroundcolor: rgbToHex(get$4(style, 'background-color').getOr(''))\n      });\n      const defaultData = {\n        height: '',\n        width: '100%',\n        cellspacing: '',\n        cellpadding: '',\n        caption: false,\n        class: '',\n        align: '',\n        border: ''\n      };\n      const getBorder = () => {\n        const borderWidth = style['border-width'];\n        if (shouldStyleWithCss(editor) && borderWidth) {\n          return { border: borderWidth };\n        }\n        return get$4(attrs, 'border').fold(() => ({}), border => ({ border }));\n      };\n      const advStyle = hasAdvTableTab ? extractAdvancedStyleData() : {};\n      const getCellPaddingCellSpacing = () => {\n        const spacing = get$4(style, 'border-spacing').or(get$4(attrs, 'cellspacing')).fold(() => ({}), cellspacing => ({ cellspacing }));\n        const padding = get$4(style, 'border-padding').or(get$4(attrs, 'cellpadding')).fold(() => ({}), cellpadding => ({ cellpadding }));\n        return {\n          ...spacing,\n          ...padding\n        };\n      };\n      const data = {\n        ...defaultData,\n        ...style,\n        ...attrs,\n        ...advStyle,\n        ...getBorder(),\n        ...getCellPaddingCellSpacing()\n      };\n      return data;\n    };\n    const getRowType = elm => table(SugarElement.fromDom(elm)).map(table => {\n      const target = { selection: fromDom(elm.cells) };\n      return getRowsType(table, target);\n    }).getOr('');\n    const extractDataFromTableElement = (editor, elm, hasAdvTableTab) => {\n      const getBorder = (dom, elm) => {\n        const optBorderWidth = getRaw(SugarElement.fromDom(elm), 'border-width');\n        if (shouldStyleWithCss(editor) && optBorderWidth.isSome()) {\n          return optBorderWidth.getOr('');\n        }\n        return dom.getAttrib(elm, 'border') || getTDTHOverallStyle(editor.dom, elm, 'border-width') || getTDTHOverallStyle(editor.dom, elm, 'border');\n      };\n      const dom = editor.dom;\n      const cellspacing = shouldStyleWithCss(editor) ? dom.getStyle(elm, 'border-spacing') || dom.getAttrib(elm, 'cellspacing') : dom.getAttrib(elm, 'cellspacing') || dom.getStyle(elm, 'border-spacing');\n      const cellpadding = shouldStyleWithCss(editor) ? getTDTHOverallStyle(dom, elm, 'padding') || dom.getAttrib(elm, 'cellpadding') : dom.getAttrib(elm, 'cellpadding') || getTDTHOverallStyle(dom, elm, 'padding');\n      return {\n        width: dom.getStyle(elm, 'width') || dom.getAttrib(elm, 'width'),\n        height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n        cellspacing,\n        cellpadding,\n        border: getBorder(dom, elm),\n        caption: !!dom.select('caption', elm)[0],\n        class: dom.getAttrib(elm, 'class', ''),\n        align: getHAlignment(editor, elm),\n        ...hasAdvTableTab ? extractAdvancedStyles(elm) : {}\n      };\n    };\n    const extractDataFromRowElement = (editor, elm, hasAdvancedRowTab) => {\n      const dom = editor.dom;\n      return {\n        height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n        class: dom.getAttrib(elm, 'class', ''),\n        type: getRowType(elm),\n        align: getHAlignment(editor, elm),\n        ...hasAdvancedRowTab ? extractAdvancedStyles(elm) : {}\n      };\n    };\n    const extractDataFromCellElement = (editor, cell, hasAdvancedCellTab, column) => {\n      const dom = editor.dom;\n      const colElm = column.getOr(cell);\n      const getStyle = (element, style) => dom.getStyle(element, style) || dom.getAttrib(element, style);\n      return {\n        width: getStyle(colElm, 'width'),\n        height: getStyle(cell, 'height'),\n        scope: dom.getAttrib(cell, 'scope'),\n        celltype: getNodeName(cell),\n        class: dom.getAttrib(cell, 'class', ''),\n        halign: getHAlignment(editor, cell),\n        valign: getVAlignment(editor, cell),\n        ...hasAdvancedCellTab ? extractAdvancedStyles(cell) : {}\n      };\n    };\n\n    const getSelectedCells = (table, cells) => {\n      const warehouse = Warehouse.fromTable(table);\n      const allCells = Warehouse.justCells(warehouse);\n      const filtered = filter(allCells, cellA => exists(cells, cellB => eq(cellA.element, cellB)));\n      return map(filtered, cell => ({\n        element: cell.element.dom,\n        column: Warehouse.getColumnAt(warehouse, cell.column).map(col => col.element.dom)\n      }));\n    };\n    const updateSimpleProps$1 = (modifier, colModifier, data, shouldUpdate) => {\n      if (shouldUpdate('scope')) {\n        modifier.setAttrib('scope', data.scope);\n      }\n      if (shouldUpdate('class')) {\n        modifier.setAttrib('class', data.class);\n      }\n      if (shouldUpdate('height')) {\n        modifier.setStyle('height', addPxSuffix(data.height));\n      }\n      if (shouldUpdate('width')) {\n        colModifier.setStyle('width', addPxSuffix(data.width));\n      }\n    };\n    const updateAdvancedProps$1 = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('backgroundcolor')) {\n        modifier.setFormat('tablecellbackgroundcolor', data.backgroundcolor);\n      }\n      if (shouldUpdate('bordercolor')) {\n        modifier.setFormat('tablecellbordercolor', data.bordercolor);\n      }\n      if (shouldUpdate('borderstyle')) {\n        modifier.setFormat('tablecellborderstyle', data.borderstyle);\n      }\n      if (shouldUpdate('borderwidth')) {\n        modifier.setFormat('tablecellborderwidth', addPxSuffix(data.borderwidth));\n      }\n    };\n    const applyStyleData$1 = (editor, cells, data, wasChanged) => {\n      const isSingleCell = cells.length === 1;\n      each(cells, item => {\n        const cellElm = item.element;\n        const shouldOverrideCurrentValue = isSingleCell ? always : wasChanged;\n        const modifier = DomModifier.normal(editor, cellElm);\n        const colModifier = item.column.map(col => DomModifier.normal(editor, col)).getOr(modifier);\n        updateSimpleProps$1(modifier, colModifier, data, shouldOverrideCurrentValue);\n        if (hasAdvancedCellTab(editor)) {\n          updateAdvancedProps$1(modifier, data, shouldOverrideCurrentValue);\n        }\n        if (wasChanged('halign')) {\n          setAlign(editor, cellElm, data.halign);\n        }\n        if (wasChanged('valign')) {\n          setVAlign(editor, cellElm, data.valign);\n        }\n      });\n    };\n    const applyStructureData$1 = (editor, data) => {\n      editor.execCommand('mceTableCellType', false, {\n        type: data.celltype,\n        no_events: true\n      });\n    };\n    const applyCellData = (editor, cells, oldData, data) => {\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      if (size(modifiedData) > 0 && cells.length >= 1) {\n        table(cells[0]).each(table => {\n          const selectedCells = getSelectedCells(table, cells);\n          const styleModified = size(filter$1(modifiedData, (_value, key) => key !== 'scope' && key !== 'celltype')) > 0;\n          const structureModified = has(modifiedData, 'celltype');\n          if (styleModified || has(modifiedData, 'scope')) {\n            applyStyleData$1(editor, selectedCells, data, curry(has, modifiedData));\n          }\n          if (structureModified) {\n            applyStructureData$1(editor, data);\n          }\n          fireTableModified(editor, table.dom, {\n            structure: structureModified,\n            style: styleModified\n          });\n        });\n      }\n    };\n    const onSubmitCellForm = (editor, cells, oldData, api) => {\n      const data = api.getData();\n      api.close();\n      editor.undoManager.transact(() => {\n        applyCellData(editor, cells, oldData, data);\n        editor.focus();\n      });\n    };\n    const getData$1 = (editor, cells) => {\n      const cellsData = table(cells[0]).map(table => map(getSelectedCells(table, cells), item => extractDataFromCellElement(editor, item.element, hasAdvancedCellTab(editor), item.column)));\n      return getSharedValues(cellsData.getOrDie());\n    };\n    const open$2 = editor => {\n      const cells = getCellsFromSelection(editor);\n      if (cells.length === 0) {\n        return;\n      }\n      const data = getData$1(editor, cells);\n      const dialogTabPanel = {\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: getItems$2(editor)\n          },\n          getAdvancedTab(editor, 'cell')\n        ]\n      };\n      const dialogPanel = {\n        type: 'panel',\n        items: [{\n            type: 'grid',\n            columns: 2,\n            items: getItems$2(editor)\n          }]\n      };\n      editor.windowManager.open({\n        title: 'Cell Properties',\n        size: 'normal',\n        body: hasAdvancedCellTab(editor) ? dialogTabPanel : dialogPanel,\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data,\n        onSubmit: curry(onSubmitCellForm, editor, cells, data)\n      });\n    };\n\n    const getClassList = editor => {\n      const classes = buildListItems(getRowClassList(editor));\n      if (classes.length > 0) {\n        return Optional.some({\n          name: 'class',\n          type: 'listbox',\n          label: 'Class',\n          items: classes\n        });\n      }\n      return Optional.none();\n    };\n    const formChildren = [\n      {\n        type: 'listbox',\n        name: 'type',\n        label: 'Row type',\n        items: [\n          {\n            text: 'Header',\n            value: 'header'\n          },\n          {\n            text: 'Body',\n            value: 'body'\n          },\n          {\n            text: 'Footer',\n            value: 'footer'\n          }\n        ]\n      },\n      {\n        type: 'listbox',\n        name: 'align',\n        label: 'Alignment',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Left',\n            value: 'left'\n          },\n          {\n            text: 'Center',\n            value: 'center'\n          },\n          {\n            text: 'Right',\n            value: 'right'\n          }\n        ]\n      },\n      {\n        label: 'Height',\n        name: 'height',\n        type: 'input'\n      }\n    ];\n    const getItems$1 = editor => formChildren.concat(getClassList(editor).toArray());\n\n    const updateSimpleProps = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('class')) {\n        modifier.setAttrib('class', data.class);\n      }\n      if (shouldUpdate('height')) {\n        modifier.setStyle('height', addPxSuffix(data.height));\n      }\n    };\n    const updateAdvancedProps = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('backgroundcolor')) {\n        modifier.setStyle('background-color', data.backgroundcolor);\n      }\n      if (shouldUpdate('bordercolor')) {\n        modifier.setStyle('border-color', data.bordercolor);\n      }\n      if (shouldUpdate('borderstyle')) {\n        modifier.setStyle('border-style', data.borderstyle);\n      }\n    };\n    const applyStyleData = (editor, rows, data, wasChanged) => {\n      const isSingleRow = rows.length === 1;\n      const shouldOverrideCurrentValue = isSingleRow ? always : wasChanged;\n      each(rows, rowElm => {\n        const modifier = DomModifier.normal(editor, rowElm);\n        updateSimpleProps(modifier, data, shouldOverrideCurrentValue);\n        if (hasAdvancedRowTab(editor)) {\n          updateAdvancedProps(modifier, data, shouldOverrideCurrentValue);\n        }\n        if (wasChanged('align')) {\n          setAlign(editor, rowElm, data.align);\n        }\n      });\n    };\n    const applyStructureData = (editor, data) => {\n      editor.execCommand('mceTableRowType', false, {\n        type: data.type,\n        no_events: true\n      });\n    };\n    const applyRowData = (editor, rows, oldData, data) => {\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      if (size(modifiedData) > 0) {\n        const typeModified = has(modifiedData, 'type');\n        const styleModified = typeModified ? size(modifiedData) > 1 : true;\n        if (styleModified) {\n          applyStyleData(editor, rows, data, curry(has, modifiedData));\n        }\n        if (typeModified) {\n          applyStructureData(editor, data);\n        }\n        table(SugarElement.fromDom(rows[0])).each(table => fireTableModified(editor, table.dom, {\n          structure: typeModified,\n          style: styleModified\n        }));\n      }\n    };\n    const onSubmitRowForm = (editor, rows, oldData, api) => {\n      const data = api.getData();\n      api.close();\n      editor.undoManager.transact(() => {\n        applyRowData(editor, rows, oldData, data);\n        editor.focus();\n      });\n    };\n    const open$1 = editor => {\n      const rows = getRowsFromSelection(getSelectionStart(editor), ephemera.selected);\n      if (rows.length === 0) {\n        return;\n      }\n      const rowsData = map(rows, rowElm => extractDataFromRowElement(editor, rowElm.dom, hasAdvancedRowTab(editor)));\n      const data = getSharedValues(rowsData);\n      const dialogTabPanel = {\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: getItems$1(editor)\n          },\n          getAdvancedTab(editor, 'row')\n        ]\n      };\n      const dialogPanel = {\n        type: 'panel',\n        items: [{\n            type: 'grid',\n            columns: 2,\n            items: getItems$1(editor)\n          }]\n      };\n      editor.windowManager.open({\n        title: 'Row Properties',\n        size: 'normal',\n        body: hasAdvancedRowTab(editor) ? dialogTabPanel : dialogPanel,\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data,\n        onSubmit: curry(onSubmitRowForm, editor, map(rows, r => r.dom), data)\n      });\n    };\n\n    const getItems = (editor, classes, insertNewTable) => {\n      const rowColCountItems = !insertNewTable ? [] : [\n        {\n          type: 'input',\n          name: 'cols',\n          label: 'Cols',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'rows',\n          label: 'Rows',\n          inputMode: 'numeric'\n        }\n      ];\n      const alwaysItems = [\n        {\n          type: 'input',\n          name: 'width',\n          label: 'Width'\n        },\n        {\n          type: 'input',\n          name: 'height',\n          label: 'Height'\n        }\n      ];\n      const appearanceItems = hasAppearanceOptions(editor) ? [\n        {\n          type: 'input',\n          name: 'cellspacing',\n          label: 'Cell spacing',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'cellpadding',\n          label: 'Cell padding',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'border',\n          label: 'Border width'\n        },\n        {\n          type: 'label',\n          label: 'Caption',\n          items: [{\n              type: 'checkbox',\n              name: 'caption',\n              label: 'Show caption'\n            }]\n        }\n      ] : [];\n      const alignmentItem = [{\n          type: 'listbox',\n          name: 'align',\n          label: 'Alignment',\n          items: [\n            {\n              text: 'None',\n              value: ''\n            },\n            {\n              text: 'Left',\n              value: 'left'\n            },\n            {\n              text: 'Center',\n              value: 'center'\n            },\n            {\n              text: 'Right',\n              value: 'right'\n            }\n          ]\n        }];\n      const classListItem = classes.length > 0 ? [{\n          type: 'listbox',\n          name: 'class',\n          label: 'Class',\n          items: classes\n        }] : [];\n      return rowColCountItems.concat(alwaysItems).concat(appearanceItems).concat(alignmentItem).concat(classListItem);\n    };\n\n    const styleTDTH = (dom, elm, name, value) => {\n      if (elm.tagName === 'TD' || elm.tagName === 'TH') {\n        if (isString(name)) {\n          dom.setStyle(elm, name, value);\n        } else {\n          dom.setStyles(elm, name);\n        }\n      } else {\n        if (elm.children) {\n          for (let i = 0; i < elm.children.length; i++) {\n            styleTDTH(dom, elm.children[i], name, value);\n          }\n        }\n      }\n    };\n    const applyDataToElement = (editor, tableElm, data) => {\n      const dom = editor.dom;\n      const attrs = {};\n      const styles = {};\n      attrs.class = data.class;\n      styles.height = addPxSuffix(data.height);\n      if (shouldStyleWithCss(editor)) {\n        styles.width = addPxSuffix(data.width);\n      } else if (dom.getAttrib(tableElm, 'width')) {\n        attrs.width = removePxSuffix(data.width);\n      }\n      if (shouldStyleWithCss(editor)) {\n        styles['border-width'] = addPxSuffix(data.border);\n        styles['border-spacing'] = addPxSuffix(data.cellspacing);\n      } else {\n        attrs.border = data.border;\n        attrs.cellpadding = data.cellpadding;\n        attrs.cellspacing = data.cellspacing;\n      }\n      if (shouldStyleWithCss(editor) && tableElm.children) {\n        for (let i = 0; i < tableElm.children.length; i++) {\n          styleTDTH(dom, tableElm.children[i], {\n            'border-width': addPxSuffix(data.border),\n            'padding': addPxSuffix(data.cellpadding)\n          });\n          if (hasAdvancedTableTab(editor)) {\n            styleTDTH(dom, tableElm.children[i], { 'border-color': data.bordercolor });\n          }\n        }\n      }\n      if (hasAdvancedTableTab(editor)) {\n        styles['background-color'] = data.backgroundcolor;\n        styles['border-color'] = data.bordercolor;\n        styles['border-style'] = data.borderstyle;\n      }\n      attrs.style = dom.serializeStyle({\n        ...getDefaultStyles(editor),\n        ...styles\n      });\n      dom.setAttribs(tableElm, {\n        ...getDefaultAttributes(editor),\n        ...attrs\n      });\n    };\n    const onSubmitTableForm = (editor, tableElm, oldData, api) => {\n      const dom = editor.dom;\n      const data = api.getData();\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      api.close();\n      if (data.class === '') {\n        delete data.class;\n      }\n      editor.undoManager.transact(() => {\n        if (!tableElm) {\n          const cols = parseInt(data.cols, 10) || 1;\n          const rows = parseInt(data.rows, 10) || 1;\n          editor.execCommand('mceInsertTable', false, {\n            rows,\n            columns: cols\n          });\n          tableElm = getSelectionCell(getSelectionStart(editor), getIsRoot(editor)).bind(cell => table(cell, getIsRoot(editor))).map(table => table.dom).getOrUndefined();\n        }\n        if (size(modifiedData) > 0) {\n          applyDataToElement(editor, tableElm, data);\n          const captionElm = dom.select('caption', tableElm)[0];\n          if (captionElm && !data.caption || !captionElm && data.caption) {\n            editor.execCommand('mceTableToggleCaption');\n          }\n          setAlign(editor, tableElm, data.align);\n        }\n        editor.focus();\n        editor.addVisual();\n        if (size(modifiedData) > 0) {\n          const captionModified = has(modifiedData, 'caption');\n          const styleModified = captionModified ? size(modifiedData) > 1 : true;\n          fireTableModified(editor, tableElm, {\n            structure: captionModified,\n            style: styleModified\n          });\n        }\n      });\n    };\n    const open = (editor, insertNewTable) => {\n      const dom = editor.dom;\n      let tableElm;\n      let data = extractDataFromSettings(editor, hasAdvancedTableTab(editor));\n      if (insertNewTable === false) {\n        tableElm = dom.getParent(editor.selection.getStart(), 'table', editor.getBody());\n        if (tableElm) {\n          data = extractDataFromTableElement(editor, tableElm, hasAdvancedTableTab(editor));\n        } else {\n          if (hasAdvancedTableTab(editor)) {\n            data.borderstyle = '';\n            data.bordercolor = '';\n            data.backgroundcolor = '';\n          }\n        }\n      } else {\n        data.cols = '1';\n        data.rows = '1';\n        if (hasAdvancedTableTab(editor)) {\n          data.borderstyle = '';\n          data.bordercolor = '';\n          data.backgroundcolor = '';\n        }\n      }\n      const classes = buildListItems(getTableClassList(editor));\n      if (classes.length > 0) {\n        if (data.class) {\n          data.class = data.class.replace(/\\s*mce\\-item\\-table\\s*/g, '');\n        }\n      }\n      const generalPanel = {\n        type: 'grid',\n        columns: 2,\n        items: getItems(editor, classes, insertNewTable)\n      };\n      const nonAdvancedForm = () => ({\n        type: 'panel',\n        items: [generalPanel]\n      });\n      const advancedForm = () => ({\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: [generalPanel]\n          },\n          getAdvancedTab(editor, 'table')\n        ]\n      });\n      const dialogBody = hasAdvancedTableTab(editor) ? advancedForm() : nonAdvancedForm();\n      editor.windowManager.open({\n        title: 'Table Properties',\n        size: 'normal',\n        body: dialogBody,\n        onSubmit: curry(onSubmitTableForm, editor, tableElm, data),\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data\n      });\n    };\n\n    const registerCommands = editor => {\n      each$1({\n        mceTableProps: curry(open, editor, false),\n        mceTableRowProps: curry(open$1, editor),\n        mceTableCellProps: curry(open$2, editor)\n      }, (func, name) => editor.addCommand(name, () => func()));\n      editor.addCommand('mceInsertTableDialog', _ui => {\n        open(editor, true);\n      });\n    };\n\n    const child = (scope, selector) => child$1(scope, selector).isSome();\n\n    const selection = identity;\n    const unmergable = selectedCells => {\n      const hasSpan = (elem, type) => getOpt(elem, type).exists(span => parseInt(span, 10) > 1);\n      const hasRowOrColSpan = elem => hasSpan(elem, 'rowspan') || hasSpan(elem, 'colspan');\n      return selectedCells.length > 0 && forall(selectedCells, hasRowOrColSpan) ? Optional.some(selectedCells) : Optional.none();\n    };\n    const mergable = (table, selectedCells, ephemera) => {\n      if (selectedCells.length <= 1) {\n        return Optional.none();\n      } else {\n        return retrieveBox(table, ephemera.firstSelectedSelector, ephemera.lastSelectedSelector).map(bounds => ({\n          bounds,\n          cells: selectedCells\n        }));\n      }\n    };\n\n    const noMenu = cell => ({\n      element: cell,\n      mergable: Optional.none(),\n      unmergable: Optional.none(),\n      selection: [cell]\n    });\n    const forMenu = (selectedCells, table, cell) => ({\n      element: cell,\n      mergable: mergable(table, selectedCells, ephemera),\n      unmergable: unmergable(selectedCells),\n      selection: selection(selectedCells)\n    });\n\n    const getSelectionTargets = editor => {\n      const targets = Cell(Optional.none());\n      const changeHandlers = Cell([]);\n      let selectionDetails = Optional.none();\n      const isCaption = isTag('caption');\n      const isDisabledForSelection = key => selectionDetails.forall(details => !details[key]);\n      const getStart = () => getSelectionCellOrCaption(getSelectionStart(editor), getIsRoot(editor));\n      const getEnd = () => getSelectionCellOrCaption(getSelectionEnd(editor), getIsRoot(editor));\n      const findTargets = () => getStart().bind(startCellOrCaption => flatten(lift2(table(startCellOrCaption), getEnd().bind(table), (startTable, endTable) => {\n        if (eq(startTable, endTable)) {\n          if (isCaption(startCellOrCaption)) {\n            return Optional.some(noMenu(startCellOrCaption));\n          } else {\n            return Optional.some(forMenu(getCellsFromSelection(editor), startTable, startCellOrCaption));\n          }\n        }\n        return Optional.none();\n      })));\n      const getExtractedDetails = targets => {\n        const tableOpt = table(targets.element);\n        return tableOpt.map(table => {\n          const warehouse = Warehouse.fromTable(table);\n          const selectedCells = onCells(warehouse, targets).getOr([]);\n          const locked = foldl(selectedCells, (acc, cell) => {\n            if (cell.isLocked) {\n              acc.onAny = true;\n              if (cell.column === 0) {\n                acc.onFirst = true;\n              } else if (cell.column + cell.colspan >= warehouse.grid.columns) {\n                acc.onLast = true;\n              }\n            }\n            return acc;\n          }, {\n            onAny: false,\n            onFirst: false,\n            onLast: false\n          });\n          return {\n            mergeable: onUnlockedMergable(warehouse, targets).isSome(),\n            unmergeable: onUnlockedUnmergable(warehouse, targets).isSome(),\n            locked\n          };\n        });\n      };\n      const resetTargets = () => {\n        targets.set(cached(findTargets)());\n        selectionDetails = targets.get().bind(getExtractedDetails);\n        each(changeHandlers.get(), handler => handler());\n      };\n      const setupHandler = handler => {\n        handler();\n        changeHandlers.set(changeHandlers.get().concat([handler]));\n        return () => {\n          changeHandlers.set(filter(changeHandlers.get(), h => h !== handler));\n        };\n      };\n      const onSetup = (api, isDisabled) => setupHandler(() => targets.get().fold(() => {\n        api.setEnabled(false);\n      }, targets => {\n        api.setEnabled(!isDisabled(targets));\n      }));\n      const onSetupWithToggle = (api, isDisabled, isActive) => setupHandler(() => targets.get().fold(() => {\n        api.setEnabled(false);\n        api.setActive(false);\n      }, targets => {\n        api.setEnabled(!isDisabled(targets));\n        api.setActive(isActive(targets));\n      }));\n      const isDisabledFromLocked = lockedDisable => selectionDetails.exists(details => details.locked[lockedDisable]);\n      const onSetupTable = api => onSetup(api, _ => false);\n      const onSetupCellOrRow = api => onSetup(api, targets => isCaption(targets.element));\n      const onSetupColumn = lockedDisable => api => onSetup(api, targets => isCaption(targets.element) || isDisabledFromLocked(lockedDisable));\n      const onSetupPasteable = getClipboardData => api => onSetup(api, targets => isCaption(targets.element) || getClipboardData().isNone());\n      const onSetupPasteableColumn = (getClipboardData, lockedDisable) => api => onSetup(api, targets => isCaption(targets.element) || getClipboardData().isNone() || isDisabledFromLocked(lockedDisable));\n      const onSetupMergeable = api => onSetup(api, _targets => isDisabledForSelection('mergeable'));\n      const onSetupUnmergeable = api => onSetup(api, _targets => isDisabledForSelection('unmergeable'));\n      const onSetupTableWithCaption = api => {\n        return onSetupWithToggle(api, never, targets => {\n          const tableOpt = table(targets.element, getIsRoot(editor));\n          return tableOpt.exists(table => child(table, 'caption'));\n        });\n      };\n      const onSetupTableHeaders = (command, headerType) => api => {\n        return onSetupWithToggle(api, targets => isCaption(targets.element), () => editor.queryCommandValue(command) === headerType);\n      };\n      const onSetupTableRowHeaders = onSetupTableHeaders('mceTableRowType', 'header');\n      const onSetupTableColumnHeaders = onSetupTableHeaders('mceTableColType', 'th');\n      editor.on('NodeChange ExecCommand TableSelectorChange', resetTargets);\n      return {\n        onSetupTable,\n        onSetupCellOrRow,\n        onSetupColumn,\n        onSetupPasteable,\n        onSetupPasteableColumn,\n        onSetupMergeable,\n        onSetupUnmergeable,\n        resetTargets,\n        onSetupTableWithCaption,\n        onSetupTableRowHeaders,\n        onSetupTableColumnHeaders,\n        targets: targets.get\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.FakeClipboard');\n\n    const tableTypeBase = 'x-tinymce/dom-table-';\n    const tableTypeRow = tableTypeBase + 'rows';\n    const tableTypeColumn = tableTypeBase + 'columns';\n    const getData = type => {\n      var _a;\n      const items = (_a = global.read()) !== null && _a !== void 0 ? _a : [];\n      return findMap(items, item => Optional.from(item.getType(type)));\n    };\n    const getRows = () => getData(tableTypeRow);\n    const getColumns = () => getData(tableTypeColumn);\n\n    const addButtons = (editor, selectionTargets) => {\n      editor.ui.registry.addMenuButton('table', {\n        tooltip: 'Table',\n        icon: 'table',\n        fetch: callback => callback('inserttable | cell row column | advtablesort | tableprops deletetable')\n      });\n      const cmd = command => () => editor.execCommand(command);\n      const addButtonIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addButton(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      const addToggleButtonIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addToggleButton(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      addButtonIfRegistered('tableprops', {\n        tooltip: 'Table properties',\n        command: 'mceTableProps',\n        icon: 'table',\n        onSetup: selectionTargets.onSetupTable\n      });\n      addButtonIfRegistered('tabledelete', {\n        tooltip: 'Delete table',\n        command: 'mceTableDelete',\n        icon: 'table-delete-table',\n        onSetup: selectionTargets.onSetupTable\n      });\n      addButtonIfRegistered('tablecellprops', {\n        tooltip: 'Cell properties',\n        command: 'mceTableCellProps',\n        icon: 'table-cell-properties',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablemergecells', {\n        tooltip: 'Merge cells',\n        command: 'mceTableMergeCells',\n        icon: 'table-merge-cells',\n        onSetup: selectionTargets.onSetupMergeable\n      });\n      addButtonIfRegistered('tablesplitcells', {\n        tooltip: 'Split cell',\n        command: 'mceTableSplitCells',\n        icon: 'table-split-cells',\n        onSetup: selectionTargets.onSetupUnmergeable\n      });\n      addButtonIfRegistered('tableinsertrowbefore', {\n        tooltip: 'Insert row before',\n        command: 'mceTableInsertRowBefore',\n        icon: 'table-insert-row-above',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tableinsertrowafter', {\n        tooltip: 'Insert row after',\n        command: 'mceTableInsertRowAfter',\n        icon: 'table-insert-row-after',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tabledeleterow', {\n        tooltip: 'Delete row',\n        command: 'mceTableDeleteRow',\n        icon: 'table-delete-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablerowprops', {\n        tooltip: 'Row properties',\n        command: 'mceTableRowProps',\n        icon: 'table-row-properties',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tableinsertcolbefore', {\n        tooltip: 'Insert column before',\n        command: 'mceTableInsertColBefore',\n        icon: 'table-insert-column-before',\n        onSetup: selectionTargets.onSetupColumn('onFirst')\n      });\n      addButtonIfRegistered('tableinsertcolafter', {\n        tooltip: 'Insert column after',\n        command: 'mceTableInsertColAfter',\n        icon: 'table-insert-column-after',\n        onSetup: selectionTargets.onSetupColumn('onLast')\n      });\n      addButtonIfRegistered('tabledeletecol', {\n        tooltip: 'Delete column',\n        command: 'mceTableDeleteCol',\n        icon: 'table-delete-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablecutrow', {\n        tooltip: 'Cut row',\n        command: 'mceTableCutRow',\n        icon: 'cut-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablecopyrow', {\n        tooltip: 'Copy row',\n        command: 'mceTableCopyRow',\n        icon: 'duplicate-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablepasterowbefore', {\n        tooltip: 'Paste row before',\n        command: 'mceTablePasteRowBefore',\n        icon: 'paste-row-before',\n        onSetup: selectionTargets.onSetupPasteable(getRows)\n      });\n      addButtonIfRegistered('tablepasterowafter', {\n        tooltip: 'Paste row after',\n        command: 'mceTablePasteRowAfter',\n        icon: 'paste-row-after',\n        onSetup: selectionTargets.onSetupPasteable(getRows)\n      });\n      addButtonIfRegistered('tablecutcol', {\n        tooltip: 'Cut column',\n        command: 'mceTableCutCol',\n        icon: 'cut-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablecopycol', {\n        tooltip: 'Copy column',\n        command: 'mceTableCopyCol',\n        icon: 'duplicate-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablepastecolbefore', {\n        tooltip: 'Paste column before',\n        command: 'mceTablePasteColBefore',\n        icon: 'paste-column-before',\n        onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onFirst')\n      });\n      addButtonIfRegistered('tablepastecolafter', {\n        tooltip: 'Paste column after',\n        command: 'mceTablePasteColAfter',\n        icon: 'paste-column-after',\n        onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onLast')\n      });\n      addButtonIfRegistered('tableinsertdialog', {\n        tooltip: 'Insert table',\n        command: 'mceInsertTableDialog',\n        icon: 'table'\n      });\n      const tableClassList = filterNoneItem(getTableClassList(editor));\n      if (tableClassList.length !== 0 && editor.queryCommandSupported('mceTableToggleClass')) {\n        editor.ui.registry.addMenuButton('tableclass', {\n          icon: 'table-classes',\n          tooltip: 'Table styles',\n          fetch: generateMenuItemsCallback(editor, tableClassList, 'tableclass', value => editor.execCommand('mceTableToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupTable\n        });\n      }\n      const tableCellClassList = filterNoneItem(getCellClassList(editor));\n      if (tableCellClassList.length !== 0 && editor.queryCommandSupported('mceTableCellToggleClass')) {\n        editor.ui.registry.addMenuButton('tablecellclass', {\n          icon: 'table-cell-classes',\n          tooltip: 'Cell styles',\n          fetch: generateMenuItemsCallback(editor, tableCellClassList, 'tablecellclass', value => editor.execCommand('mceTableCellToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      if (editor.queryCommandSupported('mceTableApplyCellStyle')) {\n        editor.ui.registry.addMenuButton('tablecellvalign', {\n          icon: 'vertical-align',\n          tooltip: 'Vertical align',\n          fetch: generateMenuItemsCallback(editor, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellborderwidth', {\n          icon: 'border-width',\n          tooltip: 'Border width',\n          fetch: generateMenuItemsCallback(editor, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellborderstyle', {\n          icon: 'border-style',\n          tooltip: 'Border style',\n          fetch: generateMenuItemsCallback(editor, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellbackgroundcolor', {\n          icon: 'cell-background-color',\n          tooltip: 'Background color',\n          fetch: callback => callback(buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellbordercolor', {\n          icon: 'cell-border-color',\n          tooltip: 'Border color',\n          fetch: callback => callback(buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      addToggleButtonIfRegistered('tablecaption', {\n        tooltip: 'Table caption',\n        icon: 'table-caption',\n        command: 'mceTableToggleCaption',\n        onSetup: selectionTargets.onSetupTableWithCaption\n      });\n      addToggleButtonIfRegistered('tablerowheader', {\n        tooltip: 'Row header',\n        icon: 'table-top-header',\n        command: 'mceTableRowType',\n        onAction: changeRowHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n      addToggleButtonIfRegistered('tablecolheader', {\n        tooltip: 'Column header',\n        icon: 'table-left-header',\n        command: 'mceTableColType',\n        onAction: changeColumnHeader(editor),\n        onSetup: selectionTargets.onSetupTableColumnHeaders\n      });\n    };\n    const addToolbars = editor => {\n      const isTable = table => editor.dom.is(table, 'table') && editor.getBody().contains(table);\n      const toolbar = getToolbar(editor);\n      if (toolbar.length > 0) {\n        editor.ui.registry.addContextToolbar('table', {\n          predicate: isTable,\n          items: toolbar,\n          scope: 'node',\n          position: 'node'\n        });\n      }\n    };\n\n    const addMenuItems = (editor, selectionTargets) => {\n      const cmd = command => () => editor.execCommand(command);\n      const addMenuIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addMenuItem(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n          return true;\n        } else {\n          return false;\n        }\n      };\n      const addToggleMenuIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addToggleMenuItem(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      const insertTableAction = data => {\n        editor.execCommand('mceInsertTable', false, {\n          rows: data.numRows,\n          columns: data.numColumns\n        });\n      };\n      const hasRowMenuItems = [\n        addMenuIfRegistered('tableinsertrowbefore', {\n          text: 'Insert row before',\n          icon: 'table-insert-row-above',\n          command: 'mceTableInsertRowBefore',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tableinsertrowafter', {\n          text: 'Insert row after',\n          icon: 'table-insert-row-after',\n          command: 'mceTableInsertRowAfter',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tabledeleterow', {\n          text: 'Delete row',\n          icon: 'table-delete-row',\n          command: 'mceTableDeleteRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablerowprops', {\n          text: 'Row properties',\n          icon: 'table-row-properties',\n          command: 'mceTableRowProps',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablecutrow', {\n          text: 'Cut row',\n          icon: 'cut-row',\n          command: 'mceTableCutRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablecopyrow', {\n          text: 'Copy row',\n          icon: 'duplicate-row',\n          command: 'mceTableCopyRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablepasterowbefore', {\n          text: 'Paste row before',\n          icon: 'paste-row-before',\n          command: 'mceTablePasteRowBefore',\n          onSetup: selectionTargets.onSetupPasteable(getRows)\n        }),\n        addMenuIfRegistered('tablepasterowafter', {\n          text: 'Paste row after',\n          icon: 'paste-row-after',\n          command: 'mceTablePasteRowAfter',\n          onSetup: selectionTargets.onSetupPasteable(getRows)\n        })\n      ];\n      const hasColumnMenuItems = [\n        addMenuIfRegistered('tableinsertcolumnbefore', {\n          text: 'Insert column before',\n          icon: 'table-insert-column-before',\n          command: 'mceTableInsertColBefore',\n          onSetup: selectionTargets.onSetupColumn('onFirst')\n        }),\n        addMenuIfRegistered('tableinsertcolumnafter', {\n          text: 'Insert column after',\n          icon: 'table-insert-column-after',\n          command: 'mceTableInsertColAfter',\n          onSetup: selectionTargets.onSetupColumn('onLast')\n        }),\n        addMenuIfRegistered('tabledeletecolumn', {\n          text: 'Delete column',\n          icon: 'table-delete-column',\n          command: 'mceTableDeleteCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablecutcolumn', {\n          text: 'Cut column',\n          icon: 'cut-column',\n          command: 'mceTableCutCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablecopycolumn', {\n          text: 'Copy column',\n          icon: 'duplicate-column',\n          command: 'mceTableCopyCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablepastecolumnbefore', {\n          text: 'Paste column before',\n          icon: 'paste-column-before',\n          command: 'mceTablePasteColBefore',\n          onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onFirst')\n        }),\n        addMenuIfRegistered('tablepastecolumnafter', {\n          text: 'Paste column after',\n          icon: 'paste-column-after',\n          command: 'mceTablePasteColAfter',\n          onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onLast')\n        })\n      ];\n      const hasCellMenuItems = [\n        addMenuIfRegistered('tablecellprops', {\n          text: 'Cell properties',\n          icon: 'table-cell-properties',\n          command: 'mceTableCellProps',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablemergecells', {\n          text: 'Merge cells',\n          icon: 'table-merge-cells',\n          command: 'mceTableMergeCells',\n          onSetup: selectionTargets.onSetupMergeable\n        }),\n        addMenuIfRegistered('tablesplitcells', {\n          text: 'Split cell',\n          icon: 'table-split-cells',\n          command: 'mceTableSplitCells',\n          onSetup: selectionTargets.onSetupUnmergeable\n        })\n      ];\n      if (!hasTableGrid(editor)) {\n        editor.ui.registry.addMenuItem('inserttable', {\n          text: 'Table',\n          icon: 'table',\n          onAction: cmd('mceInsertTableDialog')\n        });\n      } else {\n        editor.ui.registry.addNestedMenuItem('inserttable', {\n          text: 'Table',\n          icon: 'table',\n          getSubmenuItems: () => [{\n              type: 'fancymenuitem',\n              fancytype: 'inserttable',\n              onAction: insertTableAction\n            }]\n        });\n      }\n      editor.ui.registry.addMenuItem('inserttabledialog', {\n        text: 'Insert table',\n        icon: 'table',\n        onAction: cmd('mceInsertTableDialog')\n      });\n      addMenuIfRegistered('tableprops', {\n        text: 'Table properties',\n        onSetup: selectionTargets.onSetupTable,\n        command: 'mceTableProps'\n      });\n      addMenuIfRegistered('deletetable', {\n        text: 'Delete table',\n        icon: 'table-delete-table',\n        onSetup: selectionTargets.onSetupTable,\n        command: 'mceTableDelete'\n      });\n      if (contains(hasRowMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('row', {\n          type: 'nestedmenuitem',\n          text: 'Row',\n          getSubmenuItems: constant('tableinsertrowbefore tableinsertrowafter tabledeleterow tablerowprops | tablecutrow tablecopyrow tablepasterowbefore tablepasterowafter')\n        });\n      }\n      if (contains(hasColumnMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('column', {\n          type: 'nestedmenuitem',\n          text: 'Column',\n          getSubmenuItems: constant('tableinsertcolumnbefore tableinsertcolumnafter tabledeletecolumn | tablecutcolumn tablecopycolumn tablepastecolumnbefore tablepastecolumnafter')\n        });\n      }\n      if (contains(hasCellMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('cell', {\n          type: 'nestedmenuitem',\n          text: 'Cell',\n          getSubmenuItems: constant('tablecellprops tablemergecells tablesplitcells')\n        });\n      }\n      editor.ui.registry.addContextMenu('table', {\n        update: () => {\n          selectionTargets.resetTargets();\n          return selectionTargets.targets().fold(constant(''), targets => {\n            if (name(targets.element) === 'caption') {\n              return 'tableprops deletetable';\n            } else {\n              return 'cell row column | advtablesort | tableprops deletetable';\n            }\n          });\n        }\n      });\n      const tableClassList = filterNoneItem(getTableClassList(editor));\n      if (tableClassList.length !== 0 && editor.queryCommandSupported('mceTableToggleClass')) {\n        editor.ui.registry.addNestedMenuItem('tableclass', {\n          icon: 'table-classes',\n          text: 'Table styles',\n          getSubmenuItems: () => buildMenuItems(editor, tableClassList, 'tableclass', value => editor.execCommand('mceTableToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupTable\n        });\n      }\n      const tableCellClassList = filterNoneItem(getCellClassList(editor));\n      if (tableCellClassList.length !== 0 && editor.queryCommandSupported('mceTableCellToggleClass')) {\n        editor.ui.registry.addNestedMenuItem('tablecellclass', {\n          icon: 'table-cell-classes',\n          text: 'Cell styles',\n          getSubmenuItems: () => buildMenuItems(editor, tableCellClassList, 'tablecellclass', value => editor.execCommand('mceTableCellToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      if (editor.queryCommandSupported('mceTableApplyCellStyle')) {\n        editor.ui.registry.addNestedMenuItem('tablecellvalign', {\n          icon: 'vertical-align',\n          text: 'Vertical align',\n          getSubmenuItems: () => buildMenuItems(editor, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellborderwidth', {\n          icon: 'border-width',\n          text: 'Border width',\n          getSubmenuItems: () => buildMenuItems(editor, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellborderstyle', {\n          icon: 'border-style',\n          text: 'Border style',\n          getSubmenuItems: () => buildMenuItems(editor, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellbackgroundcolor', {\n          icon: 'cell-background-color',\n          text: 'Background color',\n          getSubmenuItems: () => buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color'),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellbordercolor', {\n          icon: 'cell-border-color',\n          text: 'Border color',\n          getSubmenuItems: () => buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color'),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      addToggleMenuIfRegistered('tablecaption', {\n        icon: 'table-caption',\n        text: 'Table caption',\n        command: 'mceTableToggleCaption',\n        onSetup: selectionTargets.onSetupTableWithCaption\n      });\n      addToggleMenuIfRegistered('tablerowheader', {\n        text: 'Row header',\n        icon: 'table-top-header',\n        command: 'mceTableRowType',\n        onAction: changeRowHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n      addToggleMenuIfRegistered('tablecolheader', {\n        text: 'Column header',\n        icon: 'table-left-header',\n        command: 'mceTableColType',\n        onAction: changeColumnHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n    };\n\n    const Plugin = editor => {\n      const selectionTargets = getSelectionTargets(editor);\n      register(editor);\n      registerCommands(editor);\n      addMenuItems(editor, selectionTargets);\n      addButtons(editor, selectionTargets);\n      addToolbars(editor);\n    };\n    var Plugin$1 = () => {\n      global$3.add('table', Plugin);\n    };\n\n    Plugin$1();\n\n})();\n", "// Exports the \"table\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/table')\n//   ES2015:\n//     import 'tinymce/plugins/table'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/table/index.js\");"],
  "mappings": "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",
  "names": []
}
